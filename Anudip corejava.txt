Day-1
-----------------------------------
Java 1.8 features
--------------------------
1)Java is Object Oriented programming Language.
2)Java is simpler then c and c++ as we don't have pointer concept,Multiple Inheritance,operator overloading.
3)Java supports multi-threading or multi-tasking.
4)We can develop web-application,network application,standalone application and also mobile application.
5)In java we interface which support the concept of multiple inheritance.
6)In java we have constructor but no destructor.There is automatic garbage clearance.
7)java is secured language.we have 4 access specifier private,public,protected,default.

------------------------------------------
Data types
---------------------------------------------------------
primative datatype
-------------------------
1)byte - 1 byte
2)short - 2 bytes
3)int - 4 bytes
4)long - 8 bytes
5)char - 2 bytes
6)boolen - 1 bit
7)float - 4 bytes
8)double - 8 bytes
-----------------------------------------
derived datatype
----------------------------
1)String-"apple","Bangalore"
2)array
----------------------------------------
Operator
-------------------
1)unary :-i++,++i,i--,--i

2)binary :-
i)arithmatic :- +,-,*,/,%(modules)
ii)comparative :- <,>,<=,>=
iii)assignment :- =,!=
iv)bitwise :- >>,<<
3)ternary :- :,?
--------------------------------------
we have 4 access specifier private,public,protected,default.

1)private :- if we declare variable and methods as private we can access it within the class only.
2)public :- if we declare variable and methods as public we can access it within the class,outside the class and also outside the package.
3)protected :- if we declare variable and methods as protected we can access it within the class and also outside the child class.
4)default :- if we declare variable and methods as default we can access it within the class ,out side the class but not outside the package.
------------------------------------------------------------------------------------------------------------------------
program-1
--------------------
package org.wednesday;

public class First 
{
public static void main(String[] args) 
{
System.out.println("welcome to java at Anudip");	
System.out.println("My Batch code is : ANP-C7167");	
System.out.println("My Course Code is : AJP");	
}
}
---------------------------------------------------------------------------------------------
program-2
----------------
package monday;

public class First
{
public static void main(String[] args) 
{
System.out.println("Welcome to JDK1.8");	
}
}
-------------------------------------------------
program-3
----------------------
package monday;

public class First
{
public static void main(String[] args) 
{
byte a=10;
short b=20;
int c=30;
long d=40;
float e=5.6f;
double f=6.7;
String g="apple";
char h='a';
System.out.println(a+" "+b+" "+c);
System.out.println(d+" "+e+" "+f);
System.out.println(g+" "+h);
}
}
----------------------------------------------------------------
program-4
--------------------
package org.wednesday;

public class Third 
{
	public static void main(String[] args) 
	{
		int rollno=10;
		String name="Sandip";
		String address="Bangalore";
		System.out.println("the rollno is "+rollno);
		System.out.println("the name is "+name);
		System.out.println("the address is "+address);
			}
}
--------------------------------------------------------------------------------------------
program-5
----------------
package org.wednesday;

public class Third 
{
	public static void main(String[] args) 
	{
		int a=10,b=20,c=a+b;
		System.out.println("the sum is "+c);
		
			}
}
---------------------------------------------------------------------------
//wap to find the sum and average of 5 numbers.
---------------------------------------------------------------------------
program-6
-----------------
package org.wednesday;

public class Third 
{
	public static void main(String[] args) 
	{
		int a=10,b=20,c=30,d=40,e=50;
		int sum=a+b+c+d+e;
		System.out.println("the sum is "+sum);
		int avg=sum/5;
		System.out.println("the average is "+avg);
					}
}
-------------------------------------------------------------------------------------------------------
//wap to find out the square and cube of a number
--------------------------------------------------------------------------------------------
program-7
---------------------------------------------------------
package org.wednesday;

public class Third 
{
	public static void main(String[] args) 
	{
		int a=10;
		System.out.println("the square of the number is "+(a*a));
		System.out.println("the cube of the number is "+(a*a*a));
							}
}
---------------------------------------Day-2-----------------------------------------
//taking input at runtime
package org.Thursday;
import java.util.*;  //this a predefined package for scanner class 
public class Second 
{
public static void main(String[] args) 
{
Scanner ob=new Scanner(System.in);//System.in:-This is used to take input from the keyboard
System.out.println("enter two numbers");//System.out :- This is used to display message .
int a=ob.nextInt();
int b=ob.nextInt();
int c=a+b;
System.out.println("the sum is "+c);
}
}
---------------------------------------------------------
//taking input at runtime
package org.Thursday;
import java.util.*;  //this a predefined package for scanner class 
public class Second 
{
public static void main(String[] args) 
{
Scanner ob=new Scanner(System.in);//System.in:-This is used to take input from the keyboard
System.out.println("enter two numbers");//System.out :- This is used to display message .
float a=ob.nextFloat();
float b=ob.nextFloat();
float c=a+b;
System.out.println("the sum is "+c);
}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
program-8
-----------------------------
package monday;
import java.lang.*;//it is a default package
import java.util.*;//scanner class
public class First
{
int empno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter empno,name,address");
	empno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
System.out.println("the empno is "+empno);	
System.out.println("the emp name  is "+name);	
System.out.println("the emp address is "+address);	
}
public static void main(String[] args) {
	First obj=new First();
	obj.input();
	obj.display();
}
}
------------------------------------------
Object Oriented Programming concept
---------------------------------------------------------------
Class:- It is a collection of variables and methods.
Objects:-It is a reference pointer by which we can access the variables and methods of a class.

----------------------------------------------------------------------------------
//class contains variables and methods
package org.Thursday;
import java.util.*;
public class Student 
{
int rollno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name and address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("the rollno  is"+rollno);
	System.out.println("the name  is"+name);
	System.out.println("the address  is"+address);
	
}
public static void main(String[] args) {
	Student  obj=new Student();
	obj.input();
	obj.display();
}
}
----------------------------------------------------------------------------------------------
Question-1
wap to enter a student data and display it.
rollno,name,physics,chem,maths marks.
-------------------------------------------------------------------------
Program-9
---------------------
package monday;
import java.lang.*;
import java.util.*;
public class First
{
int rollno;
String name,address;
float phy,chem,math,total;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address,phy,chem,math");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	phy=ob.nextFloat();
	chem=ob.nextFloat();
	math=ob.nextFloat();
}
void display()
{
System.out.println("the rollnono is "+rollno);	
System.out.println("the name  is "+name);	
System.out.println("the address is "+address);	
System.out.println("phy"+phy+" chem"+chem+"math"+math);
System.out.println("the total is "+(phy+chem+math));
}
public static void main(String[] args) {
	First obj=new First();
	obj.input();
	obj.display();
}
}

----------------------------------------------------------------------------------------------------
Constructor
-----------------------------
A constructor is a method which has the same name as that of the class name.
It doesnot return any value.it doesnot have any return type.
There are 2 types of constructor
1)default constructor :- it is without any parameter.
2)parameterized constructor :- it is with parameter.
To access a constructor we require an object.
The constructor is executed first .It is used to construct memory block.
Garbage collector is used  to remove the memory blocks which are not in use.
*There is no destructor in java.
-----------------------------------------------------
program-10
--------------------
package monday;
import java.util.*;
class first
{
int rollno;//intance variable
String name,address;
first()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first(int rollno,String name,String address)//local variable
{
	this.rollno=rollno;//to differenciate between intance variable and local variable we use this
	this.name=name;//keyword.
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
class second
{
public static void main(String[] args) {
	first ob=new first();
	first ob1=new first(101,"ajay","bangalore");
	first ob2=new first(102,"trupti","orissa");
	ob1.display();ob2.display();
}
}
-------------------------------------------------------------
Difference between constructor and a method.
-----------------------------------------------------------------
1)a method can have any name but a constructor will have only the class name .
2)a method returns a value but constructor doesnot return any value.
----------------------
program-11
---------------------
package monday;
import java.util.*;
class first
{
int rollno;//intance variable
String name,address;
first()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first(int rollno,String name,String address)//local variable
{
	this.rollno=rollno;//to differenciate between intance variable and local variable we use this
	this.name=name;//keyword.
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
int sum(int a,int b) //method overloading
{
	return a+b;
}
float sum(float a,float b)
{
	return a+b;
}
}
class second
{
public static void main(String[] args) {
	first ob=new first();
	first ob1=new first(101,"ajay","bangalore");
	first ob2=new first(102,"trupti","orissa");
	ob1.display();ob2.display();
	System.out.println(ob1.sum(6, 6));//compiler will decide where to send the value
	System.out.println(ob1.sum(6.5f, 6.3f));
	
}
}
-----------------------------------------------------------------------
Question-2
wap to create a parameterized constractor .pass the values and display it.
employee :- empno,name,designation,salary.
-------------------------------------------------------------------------------------------------------------
program-12
---------------------
package monday;
import java.util.*;
class first1
{
int empno;//intance variable
String name,address;
first1()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first1(int rollno,String name,String address)//local variable
{
	this.empno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}

}
class second2
{
public static void main(String[] args) {
	first1 ob=new first1();
	first1 ob1=new first1(101,"ajay","bangalore");
	first1 ob2=new first1(102,"trupti","orissa");
	ob1.display();ob2.display();
	
}
}
------------------------------------------------------------------------------------
setter() is used to set the values
getter() is used to get the values
-----------------------------------------------------------------
program-13
-----------------------
package monday;

public class Employee 
{
int empno;
String name,designation;
float salary;
//right click >source >generate getter and setter
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getDesignation() {
	return designation;
}
public void setDesignation(String designation) {
	this.designation = designation;
}
public float getSalary() {
	return salary;
}
public void setSalary(float salary) {
	this.salary = salary;
}


}
------------------------------------------------------------
package Wednesday;

public class Student 
{
int rollno;
String name,email;
public int getRollno() {
	return rollno;
}
public void setRollno(int rollno) {
	this.rollno = rollno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getEmail() {
	return email;
}
public void setEmail(String email) {
	this.email = email;
}

}
--------------------------------------------------------------------------
package Tuesday;
import Wednesday.Student;
import monday.Employee;
public class Test 
{
public static void main(String[] args)
{
	Employee ob=new Employee();
	ob.setEmpno(101);
	ob.setName("Trupti");
	ob.setDesignation("software eng");
	ob.setSalary(45000.50f);
	System.out.println(ob.getEmpno());
	System.out.println(ob.getName());
	System.out.println(ob.getSalary());
	System.out.println(ob.getDesignation());
	Student ob1=new Student();
	ob1.setRollno(102);
	ob1.setName("Madhu");
	ob1.setEmail("Madhu@gmail.com");
	System.out.println(ob1.getRollno());
	System.out.println(ob1.getName());
	System.out.println(ob1.getEmail());
}
}

---------------------------------------------------------------------------------------------
Object Oriented Programming concept
---------------------------------------------------------------
Class:- It is a collection of variables and methods.
Objects:-It is a reference pointer by which we can access the variables and methods of a class.
Data Abstraction
Encapsulation
Inheritance:-It is used to reuse the existing code.Java support single,multi-level,hirarcal inheritance.we use the keyword super to access the super class and we use the extends keyword to inherite the super class.
Polymorphism:- poly means many and morphism means forms.
function overloading
int sum(int a,int b);
float sum(float a,float b);
double sum(double a,double b);
--------------------------------------------------------------------------------

function overriding.

-----------------------------------------------------------
package org.Friday;
import java.lang.*;
import java.util.*;
public class First
{
public static void main(String[] args) 
{
System.out.println("Enter two numbers");	
Scanner ob=new Scanner(System.in);
int a=ob.nextInt();
int b=ob.nextInt();
if(a>b)
	System.out.println("the greatest is "+a);
else
	System.out.println("the greatest is "+b);
}
}
----------------------------------------------Lab answer------------------------------------
package org.Friday;
public class MaxBetweenTwoNumbers
{
    public static void main(String[] args) 
    {
        
        int num1=10,num2=30;
        
        int max = (num1 > num2) ? num1 : num2;
        
        System.out.println("The maximum between " + num1 + " and " + num2 + " is: " + max);
      
 
    }
}
--------------------------------------------------------------------------------------------
create a bank class.
enter accno,name,balance=5000.
create 2 methods withdraw() and deposite().
if(balance <withdraw)display we cannot withdraw.
else balace=balance-withdraw.
deposite balance =balance+deposite
-----------------------------------------------------------------------------------------------
package org.Friday;
import java.util.*;
public class Bank 
{
	int accno;
	String name;
	float balance=5000f;
	Scanner ob=new Scanner(System.in);
	void withdraw()
	{
		System.out.println("enter accno and name and withdraw amount");
		accno=ob.nextInt();
		name=ob.next();
		float withdraw=ob.nextFloat();
		if(balance<withdraw )
			System.out.println("sorry balace is low");
		else
			System.out.println("the avaiable balance is "+(balance-withdraw));
	}
	void deposite()
	{
			System.out.println("enter accno and name and deposite amount");
		accno=ob.nextInt();
		name=ob.next();
		float deposite=ob.nextFloat();
		System.out.println("the avaiable balance is "+(balance+deposite));
	}
	public static void main(String[] args) 
	{
		Bank obj=new Bank();
		Scanner ob=new Scanner(System.in);
	System.out.println("Do you want to deposite or withdraw");
	String opp=ob.next();
	if(opp.equals("deposite"))
			obj.deposite();
		else
	obj.withdraw();
		}
}

-------------------------------------------------------------------------------------------------------------------------------------------
constructor example
---------------------------------------------
package org.Friday;

public class ContructorDemo 
{
int rollno;
String name,address;
public ContructorDemo(int rollno, String name, String address) 
{
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
}
public static void main(String[] args) 
{
	ContructorDemo ob1=new ContructorDemo(101, "sandip", "Hydrabad");
	ContructorDemo ob2=new ContructorDemo(102, "kiran", "Hydrabad");
	ob1.display();
	ob2.display();
	}
}
------------------------------------------------------------------------------------------
default constructor
---------------------------------
package org.Friday;

public class ContructorDemo 
{
int rollno;
String name,address;
public ContructorDemo()
{
	System.out.println("default constructor");
}
public ContructorDemo(int rollno, String name, String address) 
{
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
}
public static void main(String[] args) 
{
	ContructorDemo ob=new ContructorDemo();
	ContructorDemo ob1=new ContructorDemo(101, "sandip", "Hydrabad");
	ContructorDemo ob2=new ContructorDemo(102, "kiran", "Hydrabad");
	ob1.display();
	ob2.display();
	}
}
--------------------------------------------------------------------------------
constructor means memory blocks are constructed.
destructor means memory blockas are deleted.In java it is automatic.kown as garbage collection.
-------------------------------------------------------------------------------------------
//wap to create contructor for an employee class.
having empid,name,location,salary and display it.
--------------------------------------------------------------------------------
package org.Friday;

public class GetterDemo 
{
private int rollno;
private String name,address;
private float salary;
public int getRollno() {
	return rollno;
}
public void setRollno(int rollno) {
	this.rollno = rollno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
public float getSalary() {
	return salary;
}
public void setSalary(float salary) {
	this.salary = salary;
}
}
-------------------------------------------------------------------------------------------------------
package org.Friday;

public class Mainclass 
{
public static void main(String[] args) 
{
	GetterDemo ob=new GetterDemo();
ob.setRollno(101);
ob.setName("sandip");
ob.setAddress("Bangalore");
ob.setSalary(10000);
System.out.println("the rollno is "+ob.getRollno());
System.out.println("the name is "+ob.getName());
System.out.println("the address is "+ob.getAddress());
System.out.println("the salary is "+ob.getSalary());
}
}
---------------------------------------------------------------------------
//wap to enter bank data and display it
accno,name,balance using getter and setter
---------------------------------------------------------------------------
example--3
------------------
package org.monday;
public class First 
{
private int rollno;
private String name,address;

int sum(int a,int b) //function having return type int and return statement.
{
	return a+b;
}

public First() {
	System.out.println("This is default parameter");
}

public First(int rollno, String name, String address) 
{
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
	System.out.println("the rollno is"+rollno);
	System.out.println("the name is"+name);
	System.out.println("the address is"+address);
}
public int getRollno() {
	return rollno;
}
public void setRollno(int rollno) {
	this.rollno = rollno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}

}
----------------------------------------------------------------------
package org.monday;

public class Second
{
public static void main(String[] args) 
{
First ob=new First(101,"sandip","Bangalore");
First ob1=new First();
ob.setRollno(102);
ob.setName("Sandip");
ob.setAddress("Bangalore");
System.out.println("the rollno is "+ob.getRollno());
System.out.println("the name is "+ob.getName());
System.out.println("The address is "+ob.getAddress());
System.out.println("the sum is "+ob.sum(19, 20));
}
}
---------------------------------------------------------------------------------------------
//wap to create a employee class
empid,name,location,salary
enter the data using setter and constructor  and display it.
-----------------------------------------------------------------------------------------------------------
package org.tuesday;
import java.util.*;
public class First 
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	int a[]=new int[5];
	
	System.out.println("enter 5 nos");
	for(int i=0;i<5;i++)
		a[i]=ob.nextInt();
	
	System.out.println("5 nos are");
	for(int i=0;i<5;i++)
		System.out.println(a[i]);
	
}
}
----------------------------------------------------------------------------
//wap to enter 5 nos and find the sum
-----------------------------------Lab Answer----------------------------------------
year is leap or not
------------------------------
package org.tuesday;
public class CheckLeapYear {

	public static void main(String[] args) 
	{
		int year=2024;
	    if(((year % 4 == 0) && (year % 100 !=0)) || (year % 400==0))
	    {
	        System.out.println("LEAP YEAR");
	    }
	    else
	    {
	    	 System.out.println("COMMON YEAR");
	    }
	}
}
----------------------------------------------------Lab Answer----------------------------------------------------------
145---it is a strong number or not

factorial of each number and it sum should be equal to 145


1+(4*3*2*1)+(5*4*3*2*1)
1+24+120=145
------------------------------------------------------------------------------------------

package org.tuesday;

import java.util.Scanner;

public class StrongNumber {

	static void  calculateStrongNumber(int num)
	{
	int rem,sum=0,temp;
	temp=num;                          //temp=145
	while(num>0)
	{
		
		rem=num%10;         //145%10=5 //14%10=4//1%10=1
		//invoke factorial() 
		int f=factorial(rem);
		sum+=f;   
		num=num/10;          //145/10=14  //14/10=1//
	}
	
	if(sum==temp)
	{
	System.out.println(temp+" is a strong number");
	}
	else
		System.out.println(temp+" is not a strong number");

	}
	
	static int factorial(int n)
	{
		int fact=1;
		for(int i=1;i<=n;i++)
		{
		fact*=i; //fact=fact*i
		}
       return fact;
	}
	
	public static void main(String[] args) {
		calculateStrongNumber(145);

	}

}
-----------------------------------------------------------------------------------------------
Day-4
---------------
Inheritance:- It is reuse of existing code.iphone6,iphone7,iphone14.
They don't develop the code from the begining.They use the previous code+new modification is added.
java support single inheritance,multi-level inheritance,hirarcal inheritance.
we use the keyword extends for inheriting the parent class.
we use the keyword super to access the parent class variables and methods into the child class.
-------------------------------------------------
single Inheritance
-------------------------------------
//class contains variables and methods
//object is a reference pointer by which we can access the variables and methods of a class.
package org.sandip;
import java.util.*;  //this a predefined package for scanner class 
class Student //parent class
{
int rollno;//variables
String name,address;
void input()//user defined methods
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
public class Second extends Student   //child class inheriting the parent class
{
	int phy,chem,bio,sum;
	void input()
	{
		super.input();//parent class input
		Scanner ob=new Scanner(System.in);
		System.out.println("enter physics,chemistry,biology marks");
		phy=ob.nextInt();
		chem=ob.nextInt();
		bio=ob.nextInt();
		sum=phy+chem+bio;
		}
	void display()
	{
		super.display();//parent class display
		System.out.println("the physics marks is "+phy);
		System.out.println("the chemistry marks is "+chem);
		System.out.println("the biology marks is "+bio);
		System.out.println("the total marks is "+sum);
			}
	public static void main(String[] args)
 {
		Second ob=new Second();//in inheritance we create object for the child class.
		ob.input();
		ob.display();
	}
}
----------------------------------------------------------------------------------------------------------------------
create a employee class
empno,name,address
create a salary class extending the employee class
salary,pf,designation
-----------------------------------------------------------------------------------------
example-1
---------------------
package org.sandip1;

public class Employee {
int empno;
String name,address;
public Employee(int empno, String name, String address) 
{
	this.empno = empno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}

}
-------------------------------------------------------------------------------------
package org.sandip1;

public class Salary extends Employee
{
	float salary,pf;
	String designation;
	public Salary(int empno, String name, String address, float salary, float pf, String designation) 
	{
		super(empno, name, address);
		this.salary = salary;
		this.pf = pf;
		this.designation = designation;
	}
	void display()
	{
		super.display();
		System.out.println("The salary is "+salary);
		System.out.println("The PF is "+pf);
		System.out.println("The designation is "+designation);
			}
	public static void main(String[] args) 
	{
		Salary ob=new Salary(101,"sandip","Bangalore",45000.45f,1750.45f,"Worker");
		ob.display();
	}
}
----------------------------------------------------------------------------------------------------------------
is-a relationship (Inheritance)
has-a relationship (aggregation)
--------------------------------------------------
employee has a salary
house has a kitchen
employee has a bankaccount
------------------------------------------------------------------
has-a relationship example
-------------------------------------------
package org.sandip1;

public class Employee 
{
int empno;
String name,address;
Bank bank;

public Employee(int empno, String name, String address, Bank bank) 
{
	super();
	this.empno = empno;
	this.name = name;
	this.address = address;
	this.bank = bank;
}

void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	System.out.println("the bank details is "+bank);
	}

public static void main(String[] args) 
{
	Bank ob1=new Bank(1002123,"SBI Bank","MG Road");
Employee ob2=new Employee(101,"Sandip","bangalore",ob1);	
ob2.display();
}
}
---------------------------------------------------------------------------------

//toString() :- it is used to convert the object to string format. 
package org.sandip1;

public class Bank 
{
int accno;
String bankname,loc;
public Bank(int accno, String bankname, String loc)
{
	this.accno = accno;
	this.bankname = bankname;
	this.loc = loc;
}
@Override
public String toString() {
	return "Bank [accno=" + accno + ", bankname=" + bankname + ", loc=" + loc + "]";
}
}
--------------------------------------------------------------------------------------------------------
Polymorphism:- poly means many and morphism means forms.
function overloading :- same function doing multiple work.Like adding int,float,double.
int sum(int a,int b);
float sum(float a,float b);
double sum(double a,double b);
--------------------------------------------------------------------------------

function overriding.

example-1
-------------------
package org.wednesday;

public class OverloadingDemo 
{
	int sum(int a,int b)
	{
		return a+b;
		}
	float sum(float a,float b)
	{
		return a+b;
	}
	double sum(double a,double b)
	{
		return a+b;
	}
public static void main(String[] args) {
	OverloadingDemo ob=new OverloadingDemo();
	System.out.println("the sum is"+ob.sum(5,6));
	System.out.println("the sum is"+ob.sum(5.4,6.3));
	System.out.println("the sum is"+ob.sum(5.34f,6.43f));
}
}
-------------------------------------------------------------------------------------------------------
function overridding
--------------------------------
In this the parent class function will be overridden in the child class.So that the child class function can be used .
It is used in abstract class and interface.
all the details of the function should be same.
example 1
------------------
Bank project
-----------------------
1)account opening();
2)deposite();
3)withdraw();
4)loan();
-------------------------------------

package org.wednesday;

abstract class Bank
{
	abstract void accountopening();
	abstract void deposite();
	abstract void withdraw();
	abstract void loan();
	void balancecheck()
	{
		System.out.println("the balanace is displayed after withdraw or deposite");
	}
}

public class AbstractDemo extends Bank
{

	@Override
	void accountopening() {
		
		System.out.println("account opening statement");
	}

	@Override
	void deposite() {
	
		System.out.println("deposite function");
	}

	@Override
	void withdraw() {
		
		System.out.println("withdraw function");
	}

	@Override
	void loan() {
		
		System.out.println("loan statement");
	}
public static void main(String[] args) {
	AbstractDemo ob=new AbstractDemo();
	ob.accountopening();
	ob.deposite();
	ob.withdraw();
	ob.loan();
	ob.balancecheck();
}
}
------------------------------------------------------
Abstract class:- 
1)It is an incomplete class.
2)It contains incomplete methods and concret methods.
3)we cannot create objects of the abstract class.
4)we have to override the abstract methods in the child class and create object of the child class.
------------------------------------------------------------------------------
example-2
-------------------
package org.wednesday;

class Hillstations {
	  void location(){
		  System.out.println("Location is:");
		  }  
		  void famousfor(){
		  System.out.println("Famous for:");
		  }  

		  }  
		  class Manali extends Hillstations {  
		    void location(){
		  System.out.println("Manali is in Himachal Pradesh");
		  }  
		  void famousfor(){
		  System.out.println("It is Famous for Hadimba Temple and adventure sports");
		  }  
		    }
		  
		  class Mussoorie extends Hillstations {  
		    void location(){
		  System.out.println("Mussoorie is in Uttarakhand");
		  }  
		  void famousfor(){
		  System.out.println("It is Famous for education institutions");
		  }  
		    }
		  
		  class Gulmarg extends Hillstations {  
		    void location(){
		  System.out.println("Gulmarg is in J&K");
		  }  
		  void famousfor(){
		  System.out.println("It is Famous for skiing");
		  }  
		    }
		  
		  class AbstractionEx
		  {
		    public static void main(String args[])
		    { 
		    	Hillstations A = new Hillstations();
		    	Hillstations M = new Manali();

		    	Hillstations Mu = new Mussoorie();

		    	Hillstations G = new Gulmarg();

		      A.location();
		  A.famousfor();

		  M.location();
		  M.famousfor();

		  Mu.location();
		  Mu.famousfor();

		  G.location();
		  G.famousfor();
		    }  
}
-------------------------------------------------------------------------------
example-3
---------------------
package org.wednesday;

class Animall {
public void makeSound() {
    System.out.println("The animal makes a sound.");
}
}
//Cat.java
class Catt extends Animall {
@Override
public void makeSound() {
    System.out.println("The Cat meows");
}
}

//Cat.java
class Dogg extends Animall {
@Override
public void makeSound() {
  System.out.println("The dog barks");
}
}
public class Assignment2 {

	public static void main(String[] args) {
		 Animall animal = new Animall();
	        Catt cat = new Catt();
	        Dogg dog = new Dogg();
	        animal.makeSound();
	        cat.makeSound();
	        dog.makeSound();
	}

}

-----------------------------------------------------------------------------------

@Override :- The compiler will check that the method exists in the parent class.
If it doesnot exists it will through an error.
function Overriding means the function present in the parent class should also be present in the child class.
When we call the child class function a new version of the function is displayed.
----------------------------------------------------
example -3(function overriding)
------------------------------------------------------------
package org.Thursday;

public class Example1 
{
void display()
{
	System.out.println("This is main class display");
}
}
----------------------------
package org.Thursday;

public class Student extends Example1
{
	
	  @Override 
	  void display() 
	  {
	  System.out.println("This is student class display"); 
	  }
	 
}
--------------------------------------------------------
package org.Thursday;

public class Employee extends Example1
{
	@Override
void display()
{
	System.out.println("This is employee class display");
}
	public static void main(String[] args) {
		Example1 ob=new Example1();
		ob.display();
		Student ob1=new Student();
		ob1.display();
		Employee ob2=new Employee();
		ob2.display();
		
	}
}
-----------------------------------------------------------------------Assignment-4----------------------------------------------------------------------
create a parent class Bharath
details()
child class ECE
details()
child class CS
details()
child class IT
details()
----------------------------------------------------------------------------
example-4
----------------------
package org.Thursday;

public class Bharath 
{
void show()
{
	System.out.println("welcome to Bharath Eng Collage");
}
}
------------------------------------------------------
package org.Thursday;

public class ECE extends Bharath
{
	@Override
	void show()
	{
		System.out.println("welcome to Bharath Eng Collage");
		System.out.println("In ECE branch we have 78 students");
				
	}
}
----------------------------------------------------------------------------------
package org.Thursday;

public class CS extends Bharath 
{
	@Override
	void show()
	{
		System.out.println("welcome to Bharath Eng Collage");
		System.out.println("In CS branch we have 70 students");
				
	}
}
-----------------------------------------------------------------------------------
package org.Thursday;

public class IT extends Bharath
{
	@Override
	void show()
	{
		System.out.println("welcome to Bharath Eng Collage");
		System.out.println("In IT branch we have 60 students");
				
	}
	public static void main(String[] args) {
		Bharath ob=new Bharath();
		ob.show();
		ECE ob1=new ECE();
		ob1.show();
		CS ob2=new CS();
		ob2.show();
		IT ob3=new IT();
		ob3.show();
	}

}
----------------------------------------------------------------------------------






