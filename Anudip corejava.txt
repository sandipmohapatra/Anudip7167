Day-1
-----------------------------------
Java 1.8 features
--------------------------
1)Java is Object Oriented programming Language.
2)Java is simpler then c and c++ as we don't have pointer concept,Multiple Inheritance,operator overloading.
3)Java supports multi-threading or multi-tasking.
4)We can develop web-application,network application,standalone application and also mobile application.
5)In java we interface which support the concept of multiple inheritance.
6)In java we have constructor but no destructor.There is automatic garbage clearance.
7)java is secured language.we have 4 access specifier private,public,protected,default.

------------------------------------------
Data types
---------------------------------------------------------
primative datatype
-------------------------
1)byte - 1 byte
2)short - 2 bytes
3)int - 4 bytes
4)long - 8 bytes
5)char - 2 bytes
6)boolen - 1 bit
7)float - 4 bytes
8)double - 8 bytes
-----------------------------------------
derived datatype
----------------------------
1)String-"apple","Bangalore"
2)array
----------------------------------------
Operator
-------------------
1)unary :-i++,++i,i--,--i

2)binary :-
i)arithmatic :- +,-,*,/,%(modules)
ii)comparative :- <,>,<=,>=
iii)assignment :- =,!=
iv)bitwise :- >>,<<
3)ternary :- :,?
--------------------------------------
we have 4 access specifier private,public,protected,default.

1)private :- if we declare variable and methods as private we can access it within the class only.
2)public :- if we declare variable and methods as public we can access it within the class,outside the class and also outside the package.
3)protected :- if we declare variable and methods as protected we can access it within the class and also outside the child class.
4)default :- if we declare variable and methods as default we can access it within the class ,out side the class but not outside the package.
------------------------------------------------------------------------------------------------------------------------
program-1
--------------------
package org.wednesday;

public class First 
{
public static void main(String[] args) 
{
System.out.println("welcome to java at Anudip");	
System.out.println("My Batch code is : ANP-C7167");	
System.out.println("My Course Code is : AJP");	
}
}
---------------------------------------------------------------------------------------------
program-2
----------------
package monday;

public class First
{
public static void main(String[] args) 
{
System.out.println("Welcome to JDK1.8");	
}
}
-------------------------------------------------
program-3
----------------------
package monday;

public class First
{
public static void main(String[] args) 
{
byte a=10;
short b=20;
int c=30;
long d=40;
float e=5.6f;
double f=6.7;
String g="apple";
char h='a';
System.out.println(a+" "+b+" "+c);
System.out.println(d+" "+e+" "+f);
System.out.println(g+" "+h);
}
}
----------------------------------------------------------------
program-4
--------------------
package org.wednesday;

public class Third 
{
	public static void main(String[] args) 
	{
		int rollno=10;
		String name="Sandip";
		String address="Bangalore";
		System.out.println("the rollno is "+rollno);
		System.out.println("the name is "+name);
		System.out.println("the address is "+address);
			}
}
--------------------------------------------------------------------------------------------
program-5
----------------
package org.wednesday;

public class Third 
{
	public static void main(String[] args) 
	{
		int a=10,b=20,c=a+b;
		System.out.println("the sum is "+c);
		
			}
}
---------------------------------------------------------------------------
//wap to find the sum and average of 5 numbers.
---------------------------------------------------------------------------
program-6
-----------------
package org.wednesday;

public class Third 
{
	public static void main(String[] args) 
	{
		int a=10,b=20,c=30,d=40,e=50;
		int sum=a+b+c+d+e;
		System.out.println("the sum is "+sum);
		int avg=sum/5;
		System.out.println("the average is "+avg);
					}
}
-------------------------------------------------------------------------------------------------------
//wap to find out the square and cube of a number
--------------------------------------------------------------------------------------------
program-7
---------------------------------------------------------
package org.wednesday;

public class Third 
{
	public static void main(String[] args) 
	{
		int a=10;
		System.out.println("the square of the number is "+(a*a));
		System.out.println("the cube of the number is "+(a*a*a));
							}
}
---------------------------------------Day-2-----------------------------------------
//taking input at runtime
package org.Thursday;
import java.util.*;  //this a predefined package for scanner class 
public class Second 
{
public static void main(String[] args) 
{
Scanner ob=new Scanner(System.in);//System.in:-This is used to take input from the keyboard
System.out.println("enter two numbers");//System.out :- This is used to display message .
int a=ob.nextInt();
int b=ob.nextInt();
int c=a+b;
System.out.println("the sum is "+c);
}
}
---------------------------------------------------------
//taking input at runtime
package org.Thursday;
import java.util.*;  //this a predefined package for scanner class 
public class Second 
{
public static void main(String[] args) 
{
Scanner ob=new Scanner(System.in);//System.in:-This is used to take input from the keyboard
System.out.println("enter two numbers");//System.out :- This is used to display message .
float a=ob.nextFloat();
float b=ob.nextFloat();
float c=a+b;
System.out.println("the sum is "+c);
}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
program-8
-----------------------------
package monday;
import java.lang.*;//it is a default package
import java.util.*;//scanner class
public class First
{
int empno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter empno,name,address");
	empno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
System.out.println("the empno is "+empno);	
System.out.println("the emp name  is "+name);	
System.out.println("the emp address is "+address);	
}
public static void main(String[] args) {
	First obj=new First();
	obj.input();
	obj.display();
}
}
------------------------------------------
Object Oriented Programming concept
---------------------------------------------------------------
Class:- It is a collection of variables and methods.
Objects:-It is a reference pointer by which we can access the variables and methods of a class.

----------------------------------------------------------------------------------
//class contains variables and methods
package org.Thursday;
import java.util.*;
public class Student 
{
int rollno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name and address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("the rollno  is"+rollno);
	System.out.println("the name  is"+name);
	System.out.println("the address  is"+address);
	
}
public static void main(String[] args) {
	Student  obj=new Student();
	obj.input();
	obj.display();
}
}
----------------------------------------------------------------------------------------------
Question-1
wap to enter a student data and display it.
rollno,name,physics,chem,maths marks.
-------------------------------------------------------------------------
Program-9
---------------------
package monday;
import java.lang.*;
import java.util.*;
public class First
{
int rollno;
String name,address;
float phy,chem,math,total;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address,phy,chem,math");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	phy=ob.nextFloat();
	chem=ob.nextFloat();
	math=ob.nextFloat();
}
void display()
{
System.out.println("the rollnono is "+rollno);	
System.out.println("the name  is "+name);	
System.out.println("the address is "+address);	
System.out.println("phy"+phy+" chem"+chem+"math"+math);
System.out.println("the total is "+(phy+chem+math));
}
public static void main(String[] args) {
	First obj=new First();
	obj.input();
	obj.display();
}
}

----------------------------------------------------------------------------------------------------
Constructor
-----------------------------
A constructor is a method which has the same name as that of the class name.
It doesnot return any value.it doesnot have any return type.
There are 2 types of constructor
1)default constructor :- it is without any parameter.
2)parameterized constructor :- it is with parameter.
To access a constructor we require an object.
The constructor is executed first .It is used to construct memory block.
Garbage collector is used  to remove the memory blocks which are not in use.
*There is no destructor in java.
-----------------------------------------------------
program-10
--------------------
package monday;
import java.util.*;
class first
{
int rollno;//intance variable
String name,address;
first()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first(int rollno,String name,String address)//local variable
{
	this.rollno=rollno;//to differenciate between intance variable and local variable we use this
	this.name=name;//keyword.
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
class second
{
public static void main(String[] args) {
	first ob=new first();
	first ob1=new first(101,"ajay","bangalore");
	first ob2=new first(102,"trupti","orissa");
	ob1.display();ob2.display();
}
}
-------------------------------------------------------------
Difference between constructor and a method.
-----------------------------------------------------------------
1)a method can have any name but a constructor will have only the class name .
2)a method returns a value but constructor doesnot return any value.
----------------------
program-11
---------------------
package monday;
import java.util.*;
class first
{
int rollno;//intance variable
String name,address;
first()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first(int rollno,String name,String address)//local variable
{
	this.rollno=rollno;//to differenciate between intance variable and local variable we use this
	this.name=name;//keyword.
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
int sum(int a,int b) //method overloading
{
	return a+b;
}
float sum(float a,float b)
{
	return a+b;
}
}
class second
{
public static void main(String[] args) {
	first ob=new first();
	first ob1=new first(101,"ajay","bangalore");
	first ob2=new first(102,"trupti","orissa");
	ob1.display();ob2.display();
	System.out.println(ob1.sum(6, 6));//compiler will decide where to send the value
	System.out.println(ob1.sum(6.5f, 6.3f));
	
}
}
-----------------------------------------------------------------------
Question-2
wap to create a parameterized constractor .pass the values and display it.
employee :- empno,name,designation,salary.
-------------------------------------------------------------------------------------------------------------
program-12
---------------------
package monday;
import java.util.*;
class first1
{
int empno;//intance variable
String name,address;
first1()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first1(int rollno,String name,String address)//local variable
{
	this.empno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}

}
class second2
{
public static void main(String[] args) {
	first1 ob=new first1();
	first1 ob1=new first1(101,"ajay","bangalore");
	first1 ob2=new first1(102,"trupti","orissa");
	ob1.display();ob2.display();
	
}
}
------------------------------------------------------------------------------------
setter() is used to set the values
getter() is used to get the values
-----------------------------------------------------------------
program-13
-----------------------
package monday;

public class Employee 
{
int empno;
String name,designation;
float salary;
//right click >source >generate getter and setter
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getDesignation() {
	return designation;
}
public void setDesignation(String designation) {
	this.designation = designation;
}
public float getSalary() {
	return salary;
}
public void setSalary(float salary) {
	this.salary = salary;
}


}
------------------------------------------------------------
package Wednesday;

public class Student 
{
int rollno;
String name,email;
public int getRollno() {
	return rollno;
}
public void setRollno(int rollno) {
	this.rollno = rollno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getEmail() {
	return email;
}
public void setEmail(String email) {
	this.email = email;
}

}
--------------------------------------------------------------------------
package Tuesday;
import Wednesday.Student;
import monday.Employee;
public class Test 
{
public static void main(String[] args)
{
	Employee ob=new Employee();
	ob.setEmpno(101);
	ob.setName("Trupti");
	ob.setDesignation("software eng");
	ob.setSalary(45000.50f);
	System.out.println(ob.getEmpno());
	System.out.println(ob.getName());
	System.out.println(ob.getSalary());
	System.out.println(ob.getDesignation());
	Student ob1=new Student();
	ob1.setRollno(102);
	ob1.setName("Madhu");
	ob1.setEmail("Madhu@gmail.com");
	System.out.println(ob1.getRollno());
	System.out.println(ob1.getName());
	System.out.println(ob1.getEmail());
}
}

---------------------------------------------------------------------------------------------
Object Oriented Programming concept
---------------------------------------------------------------
Class:- It is a collection of variables and methods.
Objects:-It is a reference pointer by which we can access the variables and methods of a class.
Data Abstraction
Encapsulation
Inheritance:-It is used to reuse the existing code.Java support single,multi-level,hirarcal inheritance.we use the keyword super to access the super class and we use the extends keyword to inherite the super class.
Polymorphism:- poly means many and morphism means forms.
function overloading
int sum(int a,int b);
float sum(float a,float b);
double sum(double a,double b);
--------------------------------------------------------------------------------

function overriding.

-----------------------------------------------------------
package org.Friday;
import java.lang.*;
import java.util.*;
public class First
{
public static void main(String[] args) 
{
System.out.println("Enter two numbers");	
Scanner ob=new Scanner(System.in);
int a=ob.nextInt();
int b=ob.nextInt();
if(a>b)
	System.out.println("the greatest is "+a);
else
	System.out.println("the greatest is "+b);
}
}
----------------------------------------------Lab answer------------------------------------
package org.Friday;
public class MaxBetweenTwoNumbers
{
    public static void main(String[] args) 
    {
        
        int num1=10,num2=30;
        
        int max = (num1 > num2) ? num1 : num2;
        
        System.out.println("The maximum between " + num1 + " and " + num2 + " is: " + max);
      
 
    }
}
--------------------------------------------------------------------------------------------
create a bank class.
enter accno,name,balance=5000.
create 2 methods withdraw() and deposite().
if(balance <withdraw)display we cannot withdraw.
else balace=balance-withdraw.
deposite balance =balance+deposite
-----------------------------------------------------------------------------------------------
package org.Friday;
import java.util.*;
public class Bank 
{
	int accno;
	String name;
	float balance=5000f;
	Scanner ob=new Scanner(System.in);
	void withdraw()
	{
		System.out.println("enter accno and name and withdraw amount");
		accno=ob.nextInt();
		name=ob.next();
		float withdraw=ob.nextFloat();
		if(balance<withdraw )
			System.out.println("sorry balace is low");
		else
			System.out.println("the avaiable balance is "+(balance-withdraw));
	}
	void deposite()
	{
			System.out.println("enter accno and name and deposite amount");
		accno=ob.nextInt();
		name=ob.next();
		float deposite=ob.nextFloat();
		System.out.println("the avaiable balance is "+(balance+deposite));
	}
	public static void main(String[] args) 
	{
		Bank obj=new Bank();
		Scanner ob=new Scanner(System.in);
	System.out.println("Do you want to deposite or withdraw");
	String opp=ob.next();
	if(opp.equals("deposite"))
			obj.deposite();
		else
	obj.withdraw();
		}
}

-------------------------------------------------------------------------------------------------------------------------------------------
constructor example
---------------------------------------------
package org.Friday;

public class ContructorDemo 
{
int rollno;
String name,address;
public ContructorDemo(int rollno, String name, String address) 
{
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
}
public static void main(String[] args) 
{
	ContructorDemo ob1=new ContructorDemo(101, "sandip", "Hydrabad");
	ContructorDemo ob2=new ContructorDemo(102, "kiran", "Hydrabad");
	ob1.display();
	ob2.display();
	}
}
------------------------------------------------------------------------------------------
default constructor
---------------------------------
package org.Friday;

public class ContructorDemo 
{
int rollno;
String name,address;
public ContructorDemo()
{
	System.out.println("default constructor");
}
public ContructorDemo(int rollno, String name, String address) 
{
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
}
public static void main(String[] args) 
{
	ContructorDemo ob=new ContructorDemo();
	ContructorDemo ob1=new ContructorDemo(101, "sandip", "Hydrabad");
	ContructorDemo ob2=new ContructorDemo(102, "kiran", "Hydrabad");
	ob1.display();
	ob2.display();
	}
}
--------------------------------------------------------------------------------
constructor means memory blocks are constructed.
destructor means memory blockas are deleted.In java it is automatic.kown as garbage collection.
-------------------------------------------------------------------------------------------
//wap to create contructor for an employee class.
having empid,name,location,salary and display it.
--------------------------------------------------------------------------------
package org.Friday;

public class GetterDemo 
{
private int rollno;
private String name,address;
private float salary;
public int getRollno() {
	return rollno;
}
public void setRollno(int rollno) {
	this.rollno = rollno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
public float getSalary() {
	return salary;
}
public void setSalary(float salary) {
	this.salary = salary;
}
}
-------------------------------------------------------------------------------------------------------
package org.Friday;

public class Mainclass 
{
public static void main(String[] args) 
{
	GetterDemo ob=new GetterDemo();
ob.setRollno(101);
ob.setName("sandip");
ob.setAddress("Bangalore");
ob.setSalary(10000);
System.out.println("the rollno is "+ob.getRollno());
System.out.println("the name is "+ob.getName());
System.out.println("the address is "+ob.getAddress());
System.out.println("the salary is "+ob.getSalary());
}
}
---------------------------------------------------------------------------
//wap to enter bank data and display it
accno,name,balance using getter and setter
---------------------------------------------------------------------------
example--3
------------------
package org.monday;
public class First 
{
private int rollno;
private String name,address;

int sum(int a,int b) //function having return type int and return statement.
{
	return a+b;
}

public First() {
	System.out.println("This is default parameter");
}

public First(int rollno, String name, String address) 
{
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
	System.out.println("the rollno is"+rollno);
	System.out.println("the name is"+name);
	System.out.println("the address is"+address);
}
public int getRollno() {
	return rollno;
}
public void setRollno(int rollno) {
	this.rollno = rollno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}

}
----------------------------------------------------------------------
package org.monday;

public class Second
{
public static void main(String[] args) 
{
First ob=new First(101,"sandip","Bangalore");
First ob1=new First();
ob.setRollno(102);
ob.setName("Sandip");
ob.setAddress("Bangalore");
System.out.println("the rollno is "+ob.getRollno());
System.out.println("the name is "+ob.getName());
System.out.println("The address is "+ob.getAddress());
System.out.println("the sum is "+ob.sum(19, 20));
}
}
---------------------------------------------------------------------------------------------
//wap to create a employee class
empid,name,location,salary
enter the data using setter and constructor  and display it.
-----------------------------------------------------------------------------------------------------------
package org.tuesday;
import java.util.*;
public class First 
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	int a[]=new int[5];
	
	System.out.println("enter 5 nos");
	for(int i=0;i<5;i++)
		a[i]=ob.nextInt();
	
	System.out.println("5 nos are");
	for(int i=0;i<5;i++)
		System.out.println(a[i]);
	
}
}
----------------------------------------------------------------------------
//wap to enter 5 nos and find the sum
-----------------------------------Lab Answer----------------------------------------
year is leap or not
------------------------------
package org.tuesday;
public class CheckLeapYear {

	public static void main(String[] args) 
	{
		int year=2024;
	    if(((year % 4 == 0) && (year % 100 !=0)) || (year % 400==0))
	    {
	        System.out.println("LEAP YEAR");
	    }
	    else
	    {
	    	 System.out.println("COMMON YEAR");
	    }
	}
}
----------------------------------------------------Lab Answer----------------------------------------------------------
145---it is a strong number or not

factorial of each number and it sum should be equal to 145


1+(4*3*2*1)+(5*4*3*2*1)
1+24+120=145
------------------------------------------------------------------------------------------

package org.tuesday;

import java.util.Scanner;

public class StrongNumber {

	static void  calculateStrongNumber(int num)
	{
	int rem,sum=0,temp;
	temp=num;                          //temp=145
	while(num>0)
	{
		
		rem=num%10;         //145%10=5 //14%10=4//1%10=1
		//invoke factorial() 
		int f=factorial(rem);
		sum+=f;   
		num=num/10;          //145/10=14  //14/10=1//
	}
	
	if(sum==temp)
	{
	System.out.println(temp+" is a strong number");
	}
	else
		System.out.println(temp+" is not a strong number");

	}
	
	static int factorial(int n)
	{
		int fact=1;
		for(int i=1;i<=n;i++)
		{
		fact*=i; //fact=fact*i
		}
       return fact;
	}
	
	public static void main(String[] args) {
		calculateStrongNumber(145);

	}

}
-----------------------------------------------------------------------------------------------
Day-4
---------------
Inheritance:- It is reuse of existing code.iphone6,iphone7,iphone14.
They don't develop the code from the begining.They use the previous code+new modification is added.
java support single inheritance,multi-level inheritance,hirarcal inheritance.
we use the keyword extends for inheriting the parent class.
we use the keyword super to access the parent class variables and methods into the child class.
-------------------------------------------------
single Inheritance
-------------------------------------
//class contains variables and methods
//object is a reference pointer by which we can access the variables and methods of a class.
package org.sandip;
import java.util.*;  //this a predefined package for scanner class 
class Student //parent class
{
int rollno;//variables
String name,address;
void input()//user defined methods
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
public class Second extends Student   //child class inheriting the parent class
{
	int phy,chem,bio,sum;
	void input()
	{
		super.input();//parent class input
		Scanner ob=new Scanner(System.in);
		System.out.println("enter physics,chemistry,biology marks");
		phy=ob.nextInt();
		chem=ob.nextInt();
		bio=ob.nextInt();
		sum=phy+chem+bio;
		}
	void display()
	{
		super.display();//parent class display
		System.out.println("the physics marks is "+phy);
		System.out.println("the chemistry marks is "+chem);
		System.out.println("the biology marks is "+bio);
		System.out.println("the total marks is "+sum);
			}
	public static void main(String[] args)
 {
		Second ob=new Second();//in inheritance we create object for the child class.
		ob.input();
		ob.display();
	}
}
----------------------------------------------------------------------------------------------------------------------
create a employee class
empno,name,address
create a salary class extending the employee class
salary,pf,designation
-----------------------------------------------------------------------------------------
example-1
---------------------
package org.sandip1;

public class Employee {
int empno;
String name,address;
public Employee(int empno, String name, String address) 
{
	this.empno = empno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}

}
-------------------------------------------------------------------------------------
package org.sandip1;

public class Salary extends Employee
{
	float salary,pf;
	String designation;
	public Salary(int empno, String name, String address, float salary, float pf, String designation) 
	{
		super(empno, name, address);
		this.salary = salary;
		this.pf = pf;
		this.designation = designation;
	}
	void display()
	{
		super.display();
		System.out.println("The salary is "+salary);
		System.out.println("The PF is "+pf);
		System.out.println("The designation is "+designation);
			}
	public static void main(String[] args) 
	{
		Salary ob=new Salary(101,"sandip","Bangalore",45000.45f,1750.45f,"Worker");
		ob.display();
	}
}
----------------------------------------------------------------------------------------------------------------
is-a relationship (Inheritance)
has-a relationship (aggregation)
--------------------------------------------------
employee has a salary
house has a kitchen
employee has a bankaccount
------------------------------------------------------------------
has-a relationship example
-------------------------------------------
package org.sandip1;

public class Employee 
{
int empno;
String name,address;
Bank bank;

public Employee(int empno, String name, String address, Bank bank) 
{
	super();
	this.empno = empno;
	this.name = name;
	this.address = address;
	this.bank = bank;
}

void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	System.out.println("the bank details is "+bank);
	}

public static void main(String[] args) 
{
	Bank ob1=new Bank(1002123,"SBI Bank","MG Road");
Employee ob2=new Employee(101,"Sandip","bangalore",ob1);	
ob2.display();
}
}
---------------------------------------------------------------------------------

//toString() :- it is used to convert the object to string format. 
package org.sandip1;

public class Bank 
{
int accno;
String bankname,loc;
public Bank(int accno, String bankname, String loc)
{
	this.accno = accno;
	this.bankname = bankname;
	this.loc = loc;
}
@Override
public String toString() {
	return "Bank [accno=" + accno + ", bankname=" + bankname + ", loc=" + loc + "]";
}
}
--------------------------------------------------------------------------------------------------------
Polymorphism:- poly means many and morphism means forms.
function overloading :- same function doing multiple work.Like adding int,float,double.
int sum(int a,int b);
float sum(float a,float b);
double sum(double a,double b);
--------------------------------------------------------------------------------

function overriding.

example-1
-------------------
package org.wednesday;

public class OverloadingDemo 
{
	int sum(int a,int b)
	{
		return a+b;
		}
	float sum(float a,float b)
	{
		return a+b;
	}
	double sum(double a,double b)
	{
		return a+b;
	}
public static void main(String[] args) {
	OverloadingDemo ob=new OverloadingDemo();
	System.out.println("the sum is"+ob.sum(5,6));
	System.out.println("the sum is"+ob.sum(5.4,6.3));
	System.out.println("the sum is"+ob.sum(5.34f,6.43f));
}
}
-------------------------------------------------------------------------------------------------------
function overridding
--------------------------------
In this the parent class function will be overridden in the child class.So that the child class function can be used .
It is used in abstract class and interface.
all the details of the function should be same.
example 1
------------------
Bank project
-----------------------
1)account opening();
2)deposite();
3)withdraw();
4)loan();
-------------------------------------

package org.wednesday;

abstract class Bank
{
	abstract void accountopening();
	abstract void deposite();
	abstract void withdraw();
	abstract void loan();
	void balancecheck()
	{
		System.out.println("the balanace is displayed after withdraw or deposite");
	}
}

public class AbstractDemo extends Bank
{

	@Override
	void accountopening() {
		
		System.out.println("account opening statement");
	}

	@Override
	void deposite() {
	
		System.out.println("deposite function");
	}

	@Override
	void withdraw() {
		
		System.out.println("withdraw function");
	}

	@Override
	void loan() {
		
		System.out.println("loan statement");
	}
public static void main(String[] args) {
	AbstractDemo ob=new AbstractDemo();
	ob.accountopening();
	ob.deposite();
	ob.withdraw();
	ob.loan();
	ob.balancecheck();
}
}
------------------------------------------------------
Abstract class:- 
1)It is an incomplete class.
2)It contains incomplete methods and concret methods.
3)we cannot create objects of the abstract class.
4)we have to override the abstract methods in the child class and create object of the child class.
------------------------------------------------------------------------------
example-2
-------------------
package org.wednesday;

class Hillstations {
	  void location(){
		  System.out.println("Location is:");
		  }  
		  void famousfor(){
		  System.out.println("Famous for:");
		  }  

		  }  
		  class Manali extends Hillstations {  
		    void location(){
		  System.out.println("Manali is in Himachal Pradesh");
		  }  
		  void famousfor(){
		  System.out.println("It is Famous for Hadimba Temple and adventure sports");
		  }  
		    }
		  
		  class Mussoorie extends Hillstations {  
		    void location(){
		  System.out.println("Mussoorie is in Uttarakhand");
		  }  
		  void famousfor(){
		  System.out.println("It is Famous for education institutions");
		  }  
		    }
		  
		  class Gulmarg extends Hillstations {  
		    void location(){
		  System.out.println("Gulmarg is in J&K");
		  }  
		  void famousfor(){
		  System.out.println("It is Famous for skiing");
		  }  
		    }
		  
		  class AbstractionEx
		  {
		    public static void main(String args[])
		    { 
		    	Hillstations A = new Hillstations();
		    	Hillstations M = new Manali();

		    	Hillstations Mu = new Mussoorie();

		    	Hillstations G = new Gulmarg();

		      A.location();
		  A.famousfor();

		  M.location();
		  M.famousfor();

		  Mu.location();
		  Mu.famousfor();

		  G.location();
		  G.famousfor();
		    }  
}
-------------------------------------------------------------------------------
example-3
---------------------
package org.wednesday;

class Animall {
public void makeSound() {
    System.out.println("The animal makes a sound.");
}
}
//Cat.java
class Catt extends Animall {
@Override
public void makeSound() {
    System.out.println("The Cat meows");
}
}

//Cat.java
class Dogg extends Animall {
@Override
public void makeSound() {
  System.out.println("The dog barks");
}
}
public class Assignment2 {

	public static void main(String[] args) {
		 Animall animal = new Animall();
	        Catt cat = new Catt();
	        Dogg dog = new Dogg();
	        animal.makeSound();
	        cat.makeSound();
	        dog.makeSound();
	}

}

-----------------------------------------------------------------------------------

@Override :- The compiler will check that the method exists in the parent class.
If it doesnot exists it will through an error.
function Overriding means the function present in the parent class should also be present in the child class.
When we call the child class function a new version of the function is displayed.
----------------------------------------------------
example -3(function overriding)
------------------------------------------------------------
package org.Thursday;

public class Example1 
{
void display()
{
	System.out.println("This is main class display");
}
}
----------------------------
package org.Thursday;

public class Student extends Example1
{
	
	  @Override 
	  void display() 
	  {
	  System.out.println("This is student class display"); 
	  }
	 
}
--------------------------------------------------------
package org.Thursday;

public class Employee extends Example1
{
	@Override
void display()
{
	System.out.println("This is employee class display");
}
	public static void main(String[] args) {
		Example1 ob=new Example1();
		ob.display();
		Student ob1=new Student();
		ob1.display();
		Employee ob2=new Employee();
		ob2.display();
		
	}
}
-----------------------------------------------------------------------Assignment-4----------------------------------------------------------------------
create a parent class Bharath
details()
child class ECE
details()
child class CS
details()
child class IT
details()
----------------------------------------------------------------------------
example-4
----------------------
package org.Thursday;

public class Bharath 
{
void show()
{
	System.out.println("welcome to Bharath Eng Collage");
}
}
------------------------------------------------------
package org.Thursday;

public class ECE extends Bharath
{
	@Override
	void show()
	{
		System.out.println("welcome to Bharath Eng Collage");
		System.out.println("In ECE branch we have 78 students");
				
	}
}
----------------------------------------------------------------------------------
package org.Thursday;

public class CS extends Bharath 
{
	@Override
	void show()
	{
		System.out.println("welcome to Bharath Eng Collage");
		System.out.println("In CS branch we have 70 students");
				
	}
}
-----------------------------------------------------------------------------------
package org.Thursday;

public class IT extends Bharath
{
	@Override
	void show()
	{
		System.out.println("welcome to Bharath Eng Collage");
		System.out.println("In IT branch we have 60 students");
				
	}
	public static void main(String[] args) {
		Bharath ob=new Bharath();
		ob.show();
		ECE ob1=new ECE();
		ob1.show();
		CS ob2=new CS();
		ob2.show();
		IT ob3=new IT();
		ob3.show();
	}

}
----------------------------------------------------------------------------------
example-5
---------------------
package org.Thursday;

abstract class Bharath 
{
abstract void studregistration();
abstract void marksdetails();
abstract void feesdetails();
void feedback()
{
	System.out.println("very good");
}
}
----------------------------------
package org.Thursday;

public class BharathStudent extends Bharath 
{

	@Override
	void studregistration() {
		System.out.println("registration");
		
	}

	@Override
	void marksdetails() {
		System.out.println("marks details");
	}

	@Override
	void feesdetails() {
		System.out.println("fee deatils");
	}
public static void main(String[] args) {
	BharathStudent ob=new BharathStudent();
		ob.studregistration();
		ob.marksdetails();
		ob.feesdetails();
		ob.feedback();
}
}
--------------------------------------------------------------------------------------------
create an abstract class employee
having abstract methods
1)employeeDetails()
2)employeeHeath()
3)employeeBankBalance()
4)employeeProperty()
---------------------------------------------------------------------------
final is a keywork.
we can declare class as final,varaible as final,final method
If we declare class as final we cannot inherate.
If we declare variable as final we cannot change it .we have to assign it.
finat int a =10;
If we declare method as final we cannot override it.
---------------------------------------------
package org.Thursday;

public final class FinalDemo   //cannot inherite
{
final int a=10;
final void display() //final method cannot override

{
	//a=20; value of final variable cannot be changed
	System.out.println("this is a final method");
}
public static void main(String[] args) {
	FinalDemo ob=new FinalDemo();
	ob.display();
	
}
}
----------------------------------------------------------------------------------------------
create a bank abstract class 
abstract opening account() 
abstract withdraw amount()
abstract deposite amount()
---------------------------------------------
class customer extends bank
{
1st opening account should have minimal balance
2nd withamount should show the final balance
3rd deposite should show the final balance
}
---------------------------------------------------------------------------
Interface
---------------------
Java doesnot support multiple Inheritance but by interface we can perform multiple inheritance.
Interface contains abstract methods.
we cannot create object of an interface.
we have to implement into a child class the interface ,then override the abstract methods.
then create object of the child class.
----------------------------------------------------------------------
example-1
-------------------
package org.Monday;

interface First
{
	public void display(); //abstract methods means without any body
	public void input();
}
interface Second
{
	public void show();
	public void service();
}

public class InterfaceDemo implements First,Second
{

	@Override
	public void show() {
		System.out.println("This is show");
		
	}

	@Override
	public void service() {
		System.out.println("This is service");
		
	}

	@Override
	public void display() {
		System.out.println("This is display");
		
	}

	@Override
	public void input() {
		System.out.println("This is input");
		
	}
public static void main(String[] args) {
	InterfaceDemo ob=new InterfaceDemo();
	ob.display();
	ob.input();
	ob.show();
	ob.service();
}
}
---------------------------------------------------------------
*when we develop a project Bank
Bank is an interface.These abstract methods 
we have to compulsurely implements  and have body or funtionality to it.
-------------------------------------------------------------------------------------------------------------------
interface Interface1
 {
void display1();
}

 interface Interface2 extends Interface1
 {
void display2();
}

 interface Interface3
 {
void display3();
}

 interface Interface4 
 {
void display4();
}
 class InterfaceDemo implements Interface2,Interface3,Interface4
 {
	@Override
	public void display1() {
				System.out.println("display1");	 }
	@Override
	public void display4() {
		System.out.println("display4");		}
	@Override
	public void display3() {
		System.out.println("display3");			}
	@Override
	public void display2() {
		System.out.println("display2");
			}
	 public static void main(String[] args) {
		 InterfaceDemo ob=new InterfaceDemo();
	ob.display1(); ob.display2(); ob.display3();  ob.display4();
	}
 }
------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
Exception Handling
------------------------------
There are 3 type of errors.
1)compile time error.(manually)
2)logical error(manually)
3)runtime error.
In exception handling we will discuss about only runtime error.
example:-
-------------------
1)dividing a number by zero.
2)crossing the array limit.
3)entering a character in place to number.
The aim of exception handling is we don't want the program to terminate in between.
The program should display an error message but the flow of the program should be till the end.
----------------------------------------------------------------------------
There are 5 keywords used to handle the runtime errors.
1)try
2)catch
3)finally
4)throw
5)throws
------------------------------------------------------------------------------------------------
program-1
----------------------
//The main purpose is to run the program till the end
//java.lang.ArithmeticException the program is terminated we have to handle the error.
//we have to put into a try ,catch block.where we suspect that error may occur.

package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) 
{
	try
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=a/b;
System.out.println("The result is "+c);
	}
	catch(Exception ae)
	{
		System.out.println("the error is "+ae);
	}
System.out.println("The end of the program");
}
}
-----------------------------------------------------------------
In this case when there is error means we divide the number by zero.
The catch will execute and display the error message.Then the rest part of the program will execute.
-------------------------------------------------------------------------------------------------------
when there is no error the catch block will not execute.The program will execute normally.
--------------------------------------------------------------------------------------------------
There are 3 type of Exception
--------------------------------------------
1)checked exception(we have to handle it first otherwise it will give compile time error.)
i)IOException
ii)SQLException
iii)ClassNotFoundException
iv)Interrupted Exception
-----------------------------------------------------------------
2)unchecked exception
i)Arithmatic exception
ii)NumberFormat exception
iii)IndexOutOfBound exception
iv)NullPointer exception
v)java.util.InputMismatchException
--------------------------------------------
3)error
i)StackOverFlow error
ii)OutOfMemory error
iii)Machine error
-----------------------------------------------
program-3
-------------------------
Try with multiple catch
-------------------------------------
//try with multiple catch
package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) 
{
	try
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=a/b;
System.out.println("The result is "+c);
	}
	catch(ArithmeticException ae)
	{
		System.out.println("the error is "+ae);
	}
	catch(InputMismatchException ae)
	{
		System.out.println("the errorr is "+ae);
	}
	catch(Exception ae) //this can handle all types of error
	{
		System.out.println("the errorrr is "+ae);
	}
System.out.println("The end of the program");
}
}
-------------------------------------------------------------------------
* we cannot put the catch(Exception ae) above the catch(ArithmeticException ae) or catch(InputMismatchException ae).
This will show error unreachable code.
because catch(Exception ae) will handle all type of errors.but catch(ArithmeticException ae) will handle only Arithmatic exception.
--------------------------------------------------------------------------------------------------------------------------------
We generally don't write so many catch block .It will increase the line of code.
and the execution time also increases.so it in not adviceable to write multiple catch block.
--------------------------------------------------------------------
try-catch :-if try is getting error then the catch with handle the error and catch will display the error.
try-finally:-In this if try gets a error or not it doesn't matter the finally block will definatelly exceute.
It handles the error and mainly used for closing of connection,file closing etc.
Can we write try block without catch block.
yes using finally block.
--------------------------------------------------------------------------------------------------------------------
 Example-4
---------------------------
//try with finally
package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) 
{
	try
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=a/b;
System.out.println("The result is "+c);
	}

	finally
	{
	System.out.println("The end of the program");
	}
}
}
------------------------------------------------------------------------------------------------------------------
throws Exception:-
-------------------------------
we don't require any body for throws exception .we mention it with the method.
This is mostly used with checked exception.
when we work with IOException,SQLException,Interrupted Exception etc.
------------------------------------------------------------------
program-5
-----------------------
package Thrusday;
public class ErrorExample 
{
public static void main(String[] args) throws Exception
{
	for(int i=1;i<=10;i++)
	{
		System.out.println(i);
		Thread.sleep(1000);//interrupt the flow of control
	}
}
}
---------------------------------------------------------------------------
*sleep is a static method so we call it using the class name.
Thread is a class belongs to lang package.
Thread.sleep(1000);
------------------------------------------------------------------
throw keyword
--------------------------------
It is used for user defined exception.
example :- 
1)age should be greater than or equal to 18 years to cast your vote.
2)salary of employee should be greater than 15000.
3)marks should be greater than zero.
------------------------------------------------------------------------
program-6
---------------------
package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter your age to cast your vote");
	int age=ob.nextInt();
	if(age>=18)
		System.out.println("your are eligible to cash your vote");
	else
		throw new Exception("The age should be greater than or equal to 18 to caste your vote");
}
}
----------------------------------------------------------------------------
ArrayIndexOutOfBound Exception(crossing the array limit)
----------------------------------------------------------------------
This error occur when we cross the array limit.
example :- if the array size is 5 and we are entering 6 elements it will throw an error that is ArrayIndexOutOfBound exception.
--------------------------------------------------------------------------------------------------------
program-7
-----------------------
package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) throws Exception
{
	try
	{
	int a[]=new int[5];
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 5 nos");
for(int i=0;i<5;i++)
	a[i]=ob.nextInt();
System.out.println("5 nos are");
for(int i=0;i<=5;i++)
System.out.println(a[i]);
	}
	catch(Exception ae)
	{
		ae.printStackTrace();
	}

}
}
-------------------------------------------------------------------------------------------------------------------------------
Collection Framework
----------------------------------------
int a[]=new int[5]; ---------------array the size is fixed.
In case of Collection the size will be incrementing dyamically as we enter the data.
---------------------------------------------------------------
It is a collection of Object.
It provides architecture to store,manupulate group of Objects.
We can do all operations such as searching,sorting,inserting,delete,manupulating .
1)Set 2)List 3)Map are 3 interfaces.
Set is a Interface .It doesnot allow duplicate data.
It has classes :-
1)TreeSet :- It will display the data in the shorted order.
2)HashSet :-It will display the data in random order.
3)LinkedHashSet :- It will display the data in same order.
---------------------------------------------------------------------------------
program-1
---------------------
//TreeSet :- It will display the data in the shorted order.
package Friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
TreeSet<Integer> ts=new TreeSet<Integer>();
ts.add(70);
ts.add(20);
ts.add(30);
ts.add(10);
ts.add(50);
ts.add(50);
ts.add(60);
System.out.println(ts);
}
}
---------------------------------------------------------------------------
//HashSet :-It will display the data in random order.
package Friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
HashSet<Integer> ts=new HashSet<Integer>();
ts.add(70);
ts.add(20);
ts.add(30);
ts.add(10);
ts.add(50);
ts.add(50);
ts.add(60);
System.out.println(ts);
}
}
-----------------------------------------------------------------
LinkedHashSet :- It will display the data in same order.
package Friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
LinkedHashSet<Integer> ts=new LinkedHashSet<Integer>();
ts.add(70);
ts.add(20);
ts.add(30);
ts.add(10);
ts.add(50);
ts.add(50);
ts.add(60);
System.out.println(ts);
}
}
----------------------------------------------------------------------------------------
package org.tuesday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
TreeSet<String> ts=new TreeSet<String>();
ts.add("Banana");
ts.add("Apple");
ts.add("Orange");
ts.add("Pine apple");
ts.add("Grapes");
ts.add("Water Melon");
ts.add("Lemon");
System.out.println(ts);
}
}
-----------------------------------------------------------------
package org.tuesday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
HashSet<String> ts=new HashSet<String>(); //display data in random order
ts.add("Banana");
ts.add("Apple");
ts.add("Orange");
ts.add("Pine apple");
ts.add("Grapes");
ts.add("Water Melon");
ts.add("Lemon");
System.out.println(ts);
}
}
--------------------------------------------------------------------------------------------------
package org.tuesday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
LinkedHashSet<String> ts=new LinkedHashSet<String>(); //display data in same order
ts.add("Banana");
ts.add("Apple");
ts.add("Orange");
ts.add("Pine apple");
ts.add("Grapes");
ts.add("Water Melon");
ts.add("Lemon");
System.out.println(ts);
}
}
----------------------------------------------------------------------------------------------------------------------
Program-2
-----------------------
package Friday;
public class Student 
{
int rollno;
String name,address;
public Student(int rollno, String name, String address) {
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
@Override
public String toString() {
	return "Student [rollno=" + rollno + ", name=" + name + ", address=" + address + "]";
}

}
---------------------------------------------------------------------------------------
package Friday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
	Student ob=new Student(101,"sandip","bangalore");
	Student ob1=new Student(102,"shubam","bangalore");
	Student ob2=new Student(103,"trupti","bangalore");
	
LinkedHashSet<Student> ts=new LinkedHashSet<Student>();
ts.add(ob);
ts.add(ob1);
ts.add(ob2);
System.out.println(ts);
}
}
--------------------------------------------------------------------------------------------------
wap to enter data of few student into a LinkedHashSet and display it.
Rollno,name,marks,div
------------------------------------------------------------------------------------------------------
AutoBoxing and Unboxing
------------------------------------------
The autoboxing convert the primative data types into it equivalent Wrapper type.
The unboxing convert the wrapper type to primative datatype.
---------------------------------------------------------------------------------------
Datatype --Wrapper class
all datatypes in java are also classes.
-------------------------------------------
byte--Byte
short--Short
int---Integer
long--Long
float--Float
double--Double
String
boolen---Boolen
-----------------------------------------------------------------------
Example
-------------------
package Friday;
public class AutoBoxingDemo
{
public static void main(String[] args) {
	int a=10;//primative data type to wrapper class convertion is known as autoboxing
	Integer b=new Integer(a);
	System.out.println(b);
}
}
--------------------------------------------------
package Friday;
public class UnBoxingDemo
{
public static void main(String[] args) {
	Integer b=new Integer(10);//wrapper class to primative data type conversion
	int a=b;
	System.out.println(b);
}
}
----------------------------------------------------------------
Example-3
--------------------
package monday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
TreeSet<Integer> ts=new TreeSet<Integer>();
System.out.println(ts.isEmpty());//to check if the TreeSet is empty or not returns a boolean value
System.out.println(ts.size());
ts.add(70);
ts.add(20);
ts.add(30);
ts.add(10);
ts.add(50);
ts.add(50);
ts.add(60);
System.out.println(ts.isEmpty());
System.out.println(ts.size());
System.out.println(ts.contains(10));//searching .return boolean value
System.out.println(ts.contains(100));
System.out.println(ts.size());
ts.remove(50);//remove the object
System.out.println(ts);
ts.clear(); //remove all the objects
System.out.println(ts);
System.out.println(ts.size());
}
}
------------------------------------------
for each Demo
---------------------
package monday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
TreeSet<Integer> ts=new TreeSet<Integer>();
System.out.println(ts.isEmpty());//to check if the TreeSet is empty or not returns a boolean value
System.out.println(ts.size());
ts.add(70);
ts.add(20);
ts.add(30);
ts.add(10);
ts.add(50);
ts.add(50);
ts.add(60);
System.out.println("***********************");
//for each loop
for(Object obj:ts)//the ts value will be stored into the obj one by one and we will print the obj.
	System.out.println(obj);
System.out.println("***********************");
}
}
-------------------------------------------
Iterator :- it is used to iterate the data .It is an Iterface.
It has 3 methods 
1)hasNext();
2)next();
3)remove();
--------------------------------------------------------------
example-4
----------------------
package monday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
TreeSet<Integer> ts=new TreeSet<Integer>();
ts.add(70);
ts.add(20);
ts.add(30);
ts.add(10);
ts.add(50);
ts.add(50);
ts.add(60);
System.out.println("***********************");
//for each loop
for(Object obj:ts)//the ts value will be stored into the obj one by one and we will print the obj.
	System.out.println(obj);
System.out.println("***********************");
Iterator itr=ts.iterator();
while(itr.hasNext())
{
	System.out.println(itr.next());
}
}
}
--------------------------------------------------------------------------------
List :-It is an Interface.
It allows duplicate records.
We have classes 1)Stack 2)ArrayList 3)Linkedlist 4)Vector
stack :FILO .The last element will be index 0.
List display in the same order.
---------------------------------------------------------------
example-5
-------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
Stack<Integer> st=new Stack<Integer>();
st.push(10);//insert the data
st.push(20);
st.push(30);
st.push(40);
st.push(50);
st.push(60);
for(Object obj:st)
	System.out.println(obj);
System.out.println("********************************");
System.out.println(st.pop());//delete the data
System.out.println(st.peek());//to see the last data
System.out.println(st.pop());//delete the data
System.out.println("********************************");
for(Object obj:st)
	System.out.println(obj);
}
}
-----------------------------------------------------------------------------------------------
example-6
---------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
Stack<Integer> st=new Stack<Integer>();
st.push(10);//insert the data
st.push(20);
st.push(30);
st.push(40);
st.push(50);
st.push(60);
for(Object obj:st)
	System.out.println(obj);
System.out.println("********************************");
System.out.println(st.pop());//delete the data
System.out.println(st.peek());//to see the last data
System.out.println(st.pop());//delete the data
System.out.println("********************************");
for(Object obj:st)
	System.out.println(obj);
System.out.println("********************************");
//jdk1.8
st.forEach((x)->System.out.println(x));//The wrapper class super class is Object
System.out.println(st.search(10));//It will return the position of 10.It is last
System.out.println(st.search(20));
System.out.println(st.search(200));
}
}
----------------------------------------------------------------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
Stack<Integer> st=new Stack<Integer>();
st.push(10);//insert the data
st.push(20);
st.push(30);
st.push(40);
st.push(50);
st.push(60);
for(Object obj:st)
	System.out.println(obj);
System.out.println("********************************");
System.out.println(st.pop());//delete the data
System.out.println(st.peek());//to see the last data
System.out.println(st.pop());//delete the data
System.out.println("********************************");
for(Object obj:st)
	System.out.println(obj);
System.out.println("********************************");
//jdk1.8
st.forEach((x)->System.out.println(x));//The wrapper class super class is Object
System.out.println(st.search(10));//It will return the position of 10.
System.out.println(st.search(20));
System.out.println(st.search(200));//element not found it displays -1
try
{
System.out.println(st.pop());
System.out.println(st.pop());
System.out.println(st.pop());
System.out.println(st.pop());
System.out.println(st.pop());
}
catch(Exception ae)
{
	System.out.println("Stack is empty");
}
}
}
-----------------------------------------------------------------------------------
Example-7
------------------------
Linked List
----------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
LinkedList<Integer> ls=new LinkedList<Integer>();
LinkedList<Integer> ls1=new LinkedList<Integer>();
ls.add(10);
ls.add(20);
ls.add(30);
ls.add(40);
ls1.add(100);
ls1.add(200);
ls1.add(300);
ls1.add(400);
ls.forEach((x)->System.out.println(x));
System.out.println("*******************");
ls1.forEach((x)->System.out.println(x));
System.out.println("*******************");
ls.addFirst(9);
ls1.addFirst(99);
ls.forEach((x)->System.out.println(x));
System.out.println("*******************");
ls1.forEach((x)->System.out.println(x));
System.out.println("*******************");
ls.removeFirst();
ls1.removeFirst();
ls.forEach((x)->System.out.println(x));
System.out.println("*******************");
ls1.forEach((x)->System.out.println(x));
System.out.println("*******************");
ls.removeLast();
ls1.removeLast();
System.out.println(ls.getFirst());
System.out.println(ls1.getLast());
ls.addAll(ls1);
System.out.println("*******************");
ls.forEach((x)->System.out.println(x));
}
}
--------------------------------------------------------------------------------------
example-11
--------------------------
package org.tuesday;
import java.util.ArrayList;

class Book
{
private int bookId;
private String bookName;
private String authorName;
public Book(int bookId, String bookName, String authorName) {
	super();
	this.bookId = bookId;
	this.bookName = bookName;
	this.authorName = authorName;
}
@Override
public String toString() {
	return "Book [bookId=" + bookId + ", bookName=" + bookName + ", authorName=" + authorName + "]";
}


}
-----------------------------------------------------------------------
package org.tuesday;

import java.util.ArrayList;

public class CustomArrayList {
public static void main(String[] args)
{
	
ArrayList<Book> books=new ArrayList<Book>();
books.add(new Book(101, "let us c", "Yashavant P Kanetkar"));
books.add(new Book(102, "head first java ", "Kathy Sierra"));

System.out.println("--All Books--");
for(Book b:books)
{
	System.out.println(b);
}
}
}
----------------------------------------------------------------------------------
example-12
--------------------------
package com.anudip;

import java.util.ArrayList;

public class EvenNumberSum {

	public static void main(String[] args) {
		 ArrayList<Integer> numbers = new ArrayList<Integer>();
	        numbers.add(2);
	        numbers.add(5);
	        numbers.add(8);
	        numbers.add(10);
	        numbers.add(15);

	        int evenSum = 0;
	        for (int num : numbers) {
	            if (num % 2 == 0) {
	                evenSum += num;
	            }
	        }

	        System.out.println("Sum of even numbers: " + evenSum);
	    }
	}
-------------------------------------------------------------------------------------------------------------------
example-13
------------------------------------------
package org.tuesday;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class ReverseList {

	public static void main(String[] args) {
	    List<String> words = new ArrayList<String>();
	   words.add("apple");
	   words.add("banana");
	   words.add("cherry");
	   words.add("date");
	       System.out.println("original list: " + words);
        Collections.reverse(words);
       
        System.out.println("Reversed list: " + words);
	}

}
-----------------------------------------------------------------------------------------------
	
Interface to iterate the data:-
----------------------------------------------
Iterator:-hasNext(),next();remove();//In this we can move in one direction.
ListIterator:- In this we can move in both direction.
forward :- In this we have hasNext(),next().First the pointer with move in forward direction then it will move in backward direction.
backword:- In this we have hasPrevious(),previous();
-------------------------------------------------------------------------------------------------------------
Example-8
--------------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
LinkedList<String> ls=new LinkedList<String>();
ls.add("Trupti");
ls.add("Shubham");
ls.add("Madhu");
ls.add("Geetanjali");
ls.add("Sunil");
ls.add("Deepak");
System.out.println("Forword Direction");
ListIterator<String> li=ls.listIterator();
while(li.hasNext())
{
	System.out.println(li.next());
}
System.out.println("Backward Direction");
while(li.hasPrevious())
{
	System.out.println(li.previous());
}
}
}
-------------------------------------------------------------------------------------------------------
 java.util.Collections
---------------------------------------
It has lot of static methods which can be implemented ob set,list,map,queue
It this we have sort() which can sort a list,map,queue.
Collections.sort()
---------------------------------------------------
Example-9
----------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
LinkedList<String> ls=new LinkedList<String>();
ls.add("Trupti");
ls.add("Shubham");
ls.add("Madhu");
ls.add("Geetanjali");
ls.add("Sunil");
ls.add("Deepak");
Collections.sort(ls);
ls.forEach((x)->System.out.println(x));
}
}
-------------------------------------------------------------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
LinkedList<Integer> ls=new LinkedList<Integer>();
ls.add(10);
ls.add(40);
ls.add(30);
ls.add(20);
ls.add(50);
Collections.sort(ls);
ls.forEach((x)->System.out.println(x));
System.out.println("the largest no is "+Collections.max(ls));
System.out.println("the smallest no is "+Collections.min(ls));
}
}
-------------------------------------------------------------------------------------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
ArrayList<Integer> ls=new ArrayList<Integer>();
ls.add(10);
ls.add(40);
ls.add(30);
ls.add(20);
ls.add(50);
Collections.sort(ls);
ls.forEach((x)->System.out.println(x));
System.out.println("the largest no is "+Collections.max(ls));
System.out.println("the smallest no is "+Collections.min(ls));
}
}
-------------------------------------------------------------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
ArrayList<Integer> ls=new ArrayList<Integer>();
ls.add(10);
ls.add(40);
ls.add(30);
ls.add(20);
ls.add(50);
Collections.sort(ls,Collections.reverseOrder());
ls.forEach((x)->System.out.println(x));
}
}
------------------------------------------------------------------------------------------------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args)
{
ArrayList<Integer> ls=new ArrayList<Integer>();
ls.add(Integer.valueOf(10));//it will convert Object to primative datatype
ls.add(Integer.valueOf(40));
ls.add(30);//it internally convert object to primative datatype
ls.add(20);
ls.add(50);
Collections.sort(ls,Collections.reverseOrder());
ls.forEach((x)->System.out.println(x));
}
}
-------------------------------------------------------------
java.lang.Comparable :-
public abstract int compareTo(T);
it is used to sort our own object data.It checks the String ascii code.
in this if the current object is greater than the specified object it return (+) value.
in this if the current object is lesser than the specified object it return (-) value.
in this if the current object is equal than the specified object it return zero value.
-----------------------------------------------------------------------
Example-10
----------------------
package monday;

public class MarlabsEmp implements Comparable<MarlabsEmp>
{

String name;
MarlabsEmp(String name)
{
	this.name=name;
}
		@Override
		public int compareTo(MarlabsEmp obj)
	{
		return name.compareTo(obj.name);
	}}
--------------------------------------------------------------------------------------------------------------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args) 
{
ArrayList<MarlabsEmp> al=new ArrayList<MarlabsEmp>();
al.add(new MarlabsEmp("Geetanjali"));
al.add(new MarlabsEmp("Shubam"));
al.add(new MarlabsEmp("Deepak"));
al.add(new MarlabsEmp("Trupti"));
Collections.sort(al);
for(MarlabsEmp ob:al)
	System.out.println(ob.name);
}
}
--------------------------------------------------------------------------------------------
Example-11
---------------------
package monday;

public class MarlabsEmp implements Comparable<MarlabsEmp>
{
	Integer empid;
String name;
MarlabsEmp(Integer empid,String name)
{
	this.empid=empid;
	this.name=name;
}
@Override
		public int compareTo(MarlabsEmp obj)
	{
		return empid.compareTo(obj.empid);
	}}

-----------------------------------------------------------
package monday;
import java.util.*;
public class ListDemo
{
public static void main(String[] args) 
{
ArrayList<MarlabsEmp> al=new ArrayList<MarlabsEmp>();
al.add(new MarlabsEmp(104,"Geetanjali"));
al.add(new MarlabsEmp(103,"Shubam"));
al.add(new MarlabsEmp(102,"Deepak"));
al.add(new MarlabsEmp(101,"Trupti"));
Collections.sort(al);
for(MarlabsEmp ob:al)
	System.out.println(ob.empid);
}
}
--------------------------------------------------------------------------------------
Map :-It is an interface.
 In this we enter key and values pair.
The key should not be duplicate.The value can be duplicate.
The key and value pair is known as entry.
Map is useful to search,update or delete elements on the basis of the key.
-------------------------------------------------------------
Map --HashMap,LinkedHashMap,TreeMap(sorting)
-----------------------------------------------------------------------------------
Example-12
------------------
package monday;
import java.util.*;
public class HashMapDemo
{
public static void main(String[] args)
{
HashMap<Integer, String> hm=new HashMap<Integer, String>();
hm.put(1, "Gitanjali");
hm.put(2, "Subham");
hm.put(3, "sandip");
hm.put(4, "sunil");
hm.put(5, "sunil");
hm.put(4, "ajay");
Scanner ob=new Scanner(System.in);
System.out.println("enter rollno and name");
int rollno=ob.nextInt();
String name=ob.next();
hm.put(rollno, name);
System.out.println(hm);
}
}
-------------------------------------------------------------------
package org.Thursday;
import java.util.HashMap;
import java.util.Map;

public class HashMapExample {

	public static void main(String[] args) {
		  // Create a new HashMap instance with keys of type String and values of type Integer
        Map<String, Integer> hashMap = new HashMap<>();

        // Associate values with keys using the put() method
        hashMap.put("one", 1);
        hashMap.put("two", 2);
        hashMap.put("three", 3);

        // Print the contents of the HashMap
        System.out.println("HashMap: " + hashMap);

	}

}
------------------------------------------------------------------------------------------------------
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class CricketScoresMap {

	public static void main(String[] args) {
		// Create a Map instance with keys of type String (player name) and values of type Integer (score)
        Map<String, Integer> cricketScores = new HashMap<>();

        // Populate the Map with player names and scores
        cricketScores.put("Virat Kohli", 112);
        cricketScores.put("Rohit Sharma", 89);
        cricketScores.put("Shikhar Dhawan", 45);
        cricketScores.put("KL Rahul", 67);
        cricketScores.put("Rishabh Pant", 34);

        // Search for a player's name and display their score
        String x = "Rohit Sharma";
        if (cricketScores.containsKey(x)) {
            int playerScore = cricketScores.get(x);
            System.out.println(x + "'s score: " + playerScore);
        } else {
            System.out.println(x + " not found in the map.");
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------
import java.util.HashMap;
import java.util.Map;

public class CheckHashMapEmpty {

	public static void main(String[] args) {
		   // Create a new HashMap instance with keys of type String and values of type Integer
        Map<String, Integer> hashMap = new HashMap<>();

        // Associate values with keys using the put() method
        hashMap.put("one", 1);
        hashMap.put("two", 2);
        hashMap.put("three", 3);

        // Check if the HashMap is empty
        boolean isEmpty = hashMap.isEmpty();
        System.out.println("Is the HashMap empty? " + isEmpty);

        // Clear the HashMap
        hashMap.clear();

        // Check again if the HashMap is empty
        isEmpty = hashMap.isEmpty();
        System.out.println("Is the HashMap empty after clearing? " + isEmpty);
    }
}
---------------------------------------------------------------------------------
Assignment on Collection FrameWork
wap to enter some names and marks obtained in your exam
then search for a name and display the marks obtained.


---------------------------------------------------------------------------------------------
Set set=hm.entrySet();
Iterator itr=set.iterator();
while(itr.hasNext())
{
	Map.Entry en=(Map.Entry<Integer, String>)itr.next();
	System.out.println(en.getKey()+ "  "+en.getValue());
}
---------------------------------------------------------------------------------------------
HashSet is converted to set because we don't the Interface Iterator in the HashMap.We have it in Set.
entrySet() is used to convert the Map into set.
Map.Entry is a class contain getKey(),getValue()
-------------------------------------------------------------------------------------------------------
Example-13
--------------------
package monday;
import java.util.*;
public class HashMapDemo
{
public static void main(String[] args)
{
HashMap<Integer, String> hm=new HashMap<Integer, String>();
hm.put(1, "Gitanjali");
hm.put(2, "Subham");
hm.put(3, "sandip");
hm.put(4, "sunil");
hm.put(5, "sunil");
hm.put(4, "ajay");
Scanner ob=new Scanner(System.in);
System.out.println("enter rollno and name");
int rollno=ob.nextInt();
String name=ob.next();
hm.put(rollno, name);
System.out.println(hm);

Set set=hm.entrySet();
Iterator itr=set.iterator();
while(itr.hasNext())
{
	Map.Entry en=(Map.Entry<Integer, String>)itr.next();
	System.out.println(en.getKey()+ "  "+en.getValue());
}}}
-------------------------------------------------------------------------------------------------------------
package monday;
import java.util.*;
public class HashMapDemo
{
public static void main(String[] args)
{
HashMap<Integer, String> hm=new HashMap<Integer, String>();
hm.put(1, "Gitanjali");
hm.put(2, "Subham");
hm.put(3, "sandip");
hm.put(4, "sunil");
hm.put(5, "sunil");
hm.put(4, "ajay");
Scanner ob=new Scanner(System.in);
System.out.println("enter rollno and name");
int rollno=ob.nextInt();
String name=ob.next();
hm.put(rollno, name);
System.out.println(hm);
Set set=hm.entrySet();
Iterator itr=set.iterator();
while(itr.hasNext())
{
	Map.Entry en=(Map.Entry<Integer, String>)itr.next();
	System.out.println(en.getKey()+ "  "+en.getValue());
}
System.out.println("********************");
for(Map.Entry<Integer, String> m: hm.entrySet())
	System.out.println(m.getKey()+ "    "+m.getValue());
System.out.println("****************************");
hm.remove(4);
hm.remove(1,"Gitanjali");
hm.replace(2, "Ravi");
hm.replace(3,"sandip", "Ravi.k");
System.out.println("********************");
for(Map.Entry<Integer, String> m: hm.entrySet())
	System.out.println(m.getKey()+ "    "+m.getValue());
System.out.println("****************************");
}}
---------------------------------------------------------------------------
package monday;
import java.util.*;
public class HashMapDemo
{
public static void main(String[] args)
{
HashMap<Integer, String> hm=new HashMap<Integer, String>();
hm.put(1, "Gitanjali");
hm.put(2, "Subham");
hm.put(3, "sandip");
hm.put(4, "sunil");
hm.put(5, "sunil");
hm.put(4, "ajay");
Scanner ob=new Scanner(System.in);
System.out.println("enter rollno and name");
int rollno=ob.nextInt();
String name=ob.next();
hm.put(rollno, name);
System.out.println(hm);
Set set=hm.entrySet();
Iterator itr=set.iterator();
while(itr.hasNext())
{
	Map.Entry en=(Map.Entry<Integer, String>)itr.next();
	System.out.println(en.getKey()+ "  "+en.getValue());
}
System.out.println("********************");
for(Map.Entry<Integer, String> m: hm.entrySet())
	System.out.println(m.getKey()+ "    "+m.getValue());
System.out.println("****************************");
hm.remove(4);
hm.remove(1,"Gitanjali");
hm.replace(2, "Ravi");
hm.replace(3,"sandip", "Ravi.k");
System.out.println("********************");
for(Map.Entry<Integer, String> m: hm.entrySet())
	System.out.println(m.getKey()+ "    "+m.getValue());
System.out.println("****************************");
hm.replaceAll((Integer,String)->"sandip");
System.out.println("****************************");
for(Map.Entry<Integer, String> m: hm.entrySet())
	System.out.println(m.getKey()+ "    "+m.getValue());
hm.clear();
System.out.println("****************************");
for(Map.Entry<Integer, String> m: hm.entrySet())
	System.out.println(m.getKey()+ "    "+m.getValue());
System.out.println("****************************");
}}
----------------------------------------------------------------------------------------------
Example-14
-------------------------
package HashMapDemo;
import java.util.*;
public class Employee 
{
int empid;
String name,address;
float salary;
public Employee(int empid, String name, String address, float salary)
{
	super();
	this.empid = empid;
	this.name = name;
	this.address = address;
	this.salary = salary;
}
@Override
public String toString() {
return "Employee [empid=" + empid + ", name=" + name + ", address=" + address + ", salary=" + salary + "]";
}}
---------------------------------------------------------------------------------------------------
package HashMapDemo;
import java.util.*;
public class HashMapExample 
{
public static void main(String[] args) 
{
	HashMap<Integer,Employee> map=new HashMap<Integer,Employee> ();
	Employee emp1=new Employee(101,"sandip","Bangalore",5600.50f);
	Employee emp2=new Employee(102,"sunil","Bangalore",5700.50f);
	Employee emp3=new Employee(103,"pradeep","Bangalore",5800.50f);
	map.put(101, emp1);
	map.put(102, emp2);
	map.put(103, emp3);
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter the empno you want to search");
	int empno=ob.nextInt();
	
	for(Map.Entry<Integer, Employee> m: map.entrySet())
		if(m.getKey()==empno)
		System.out.println(m.getKey()+ "    "+m.getValue());
}
}
-----------------------------------------------------------------------------------------------------------------------
Q1)create a bank class using Hashmap <accno,bank>
name
address
salary
-------------------------------
search for the accno and display the details of the customer.

--------------------------------------------------------------------------
Q2)create a student class using Hashmap <rollno,student>
name
address
total marks
Grade
-------------------------------
search for the Rollno and display the details of a student.
--------------------------------------------------------------------------

JDBC :- Java database connectivity
Oracle 10xe/MySql--structured Data(rows and columns)
MongoDB --unstructured Data(facebook,paytm)
-------------------------
JDBC we have 2 types of driver:-
1)Thick Driver
2)Thin Driver
why we require driver.
1)java(byte code) -------------Driver(interpreter)-------------------Oracle/Mysql/sqlserver(ASCII code)

1)Thick Driver 
type1 driver-[java prg---odbc driver----Database]
ODBC -open database connectivity.It comes with the o/s.
-----------------------------------------------------------------------------------------
type2 driver-[java prg---driver----database]This is vendor specific.  
-------------------------------------------------------------------------------------------
type3 driver-[Java prg ---middleware server---Databse] This is vendor specific
---------------------------------------------------------------------------------------
2)Thin Driver
type4 driver-[java prg---driver----database].The driver is purely java and interacts directly with the database and is faster.

----------------------------------------------------------------------------------------------
We have to import java.sql package and handle the SQLException.

There are 2 classes and 8 interfaces
classes :- DriverManager,Types
Interfaces :- Driver,Connection,Statement,PreparedStatement,CallableStatement,ResultSet,ResultSetMetaData,DatabaseMetaData
-------------------------------------------------------------------------
When we do static data crud (create,read,update,delete) operartion we  use Statement.
When we do dynamic data crud (create,read,update,delete) operartion we  use PreparedStatement.
When we work with function,procedure we use CallableStatement.
------------------------------------------------------------------------------------------------------
Example :- 
import java.sql;
class student
{
main()throws Exception
{
1)to load the driver
2)to get connection from DriverManager
3)Statement()/preparedStatement(pass the sql query)
4)execute(pass the sql query)/execute();
}}
---------------------------------------------------------------------------------
Example-1
----------------------
Insert
------------------
package JDBC;
import java.sql.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
	//to load the driver
	Class.forName("oracle.jdbc.driver.OracleDriver");
	//to get connection from DriverManager
	Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","1234");
	//jdbc--protocal ,
	//oracle is ---database,
	//thin--type 4 driver,
	//localhost--both server and client reside in the same machine
	//localhost (IP address of the server :123.12.34.4),default port no :1521,
	//xe is the database name,
	//system--username
	//1234 is the password.
	//Statement()/preparedStatement(pass the sql query)
	Statement st=con.createStatement();
	//execute(pass the sql query)/execute();
	st.execute("insert into marlabsstud values(101,'Shubam','Bangalore')");//static query
	System.out.println("Row Inserted");		
}
}
-----------------------------------------------------------------------------------------------------
update data
-------------------
package JDBC;
import java.sql.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","1234");
		Statement st=con.createStatement();
		st.execute("update marlabsstud set address='Kolkotta' where empno=101");
		System.out.println("Row updated");		
}
}
---------------------------------------------------------------------------------
Delete
-------------------
package JDBC;
import java.sql.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","1234");
		Statement st=con.createStatement();
		st.execute("delete marlabsstud where empno=101");
		System.out.println("Row deleted");		
}
}
--------------------------------------------------------------------------------------------------------
ResultSet rs=st.executeQuery("select * from marlabsstud");
All the data from the marlabsstud table will be stored in the ResultSet variable rs.
we will use a while loop to eterate the data.The pointer will move from the first row till the last row.
-----------------
select
------------------------
package JDBC;
import java.sql.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","1234");
		Statement st=con.createStatement();
		ResultSet rs=st.executeQuery("select * from marlabsstud");
		while(rs.next())
		{
		System.out.println(rs.getInt(1)+"   "+rs.getString(2)+"  "+rs.getString(3));	
		}
		
}
}
---------------------------------------------------------------------------------------
types of execute methods
----------------------------------------
1)executeQuery() ----select
2)exceuteUpdate() -----update(returns 0 or 1)
3)excute() ----insert,update,delete,create (returns true,false);
---------------------------------------------------------------------------------------------

1)Oracle 10xe 
2)MySql 
3)MongoDB
-------------------------------------------------
Path where you can find the ojdbc14.jar (driver)

C:\oraclexe\app\oracle\product\10.2.0\server\jdbc\lib
-----------------------------------------------------------------------------
package JDBC;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
		Class.forName("com.mysql.cj.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/anudip","root","1234");
		Scanner ob=new Scanner(System.in);
		System.out.println("enter empno,name,address");
		int empno=ob.nextInt();
		String name=ob.next();
		String address=ob.next();
		PreparedStatement st=con.prepareStatement("insert into marlabsstud values(?,?,?)");
		st.setInt(1,empno);//1 represent the first ?
		st.setString(2,name);//2 represent the second ?
		st.setString(3,address);//3 represenr the third ?
		st.execute();
		System.out.println("row inserted");
}
}
---------------------------------------------------------------------------------------------
Basic of Oracle (SQL)
---------------------------
creating table
-----------------------
create table marlabsstud(empno number, name varchar2(50),address varchar2(100))

select data from the table 
------------------------------------------
select * from marlabsstud;

insert data into table
-----------------------------
insert into marlabsstud values(103,'shubham','Bangalore');

update data in the table
---------------------------------
update marlabsstud set address='hyderabad' where empno=103;

delete data from the table
-----------------------------
delete marlabsstud where empno=103

select empno,name from marlabsstud;

the table will be deleted
-----------------------------------
drop table marlabsstud; 

table structure will be present but rows will be deleted
-------------------------------------------------------------
truncate table marlabsstud;

add a column phoneno to marlabsstud
-------------------------------------------
alter table marlabsstud add phoneno number

how to update phoneno
--------------------------
update marlabsstud set phoneno='6543435' where empno=102;

how to drop the column
---------------------------
alter table marlabsstud drop column phoneno;
----------------------------------------------------------------------------------------------------------------------------
update
---------------
package JDBC;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
		Class.forName("com.mysql.cj.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/anudip","root","1234");
		Scanner ob=new Scanner(System.in);
		System.out.println("enter name,address and empno which you want to update");
		String name=ob.next();
		String address=ob.next();
		int empno=ob.nextInt();
		PreparedStatement st=con.prepareStatement("update marlabsstud set name=?,address=? where empno=?");
		st.setString(1,name);
		st.setString(2,address);
		st.setInt(3,empno);
		st.execute();
		System.out.println("row updated");
}
}
----------------------------------------------------------------------------------------------
delete
--------------
package JDBC;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
		Class.forName("com.mysql.cj.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/anudip","root","1234");
		Scanner ob=new Scanner(System.in);
		System.out.println("enter empno which you want to delete");
		int empno=ob.nextInt();
		PreparedStatement st=con.prepareStatement("delete marlabsstud where empno=?");
		st.setInt(1,empno);
		st.execute();
		System.out.println("row deleted");
		}
}

-----------------------------------------------------------------------------------------------------
package JDBC;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter empno,name,address,DOJ");
	int empno=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
	String DOJ=ob.next();
		Class.forName("com.mysql.cj.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/anudip","root","1234");
	/*	PreparedStatement st=con.prepareStatement("create table marlabemp(empno number,name varchar2(30),address varchar2(30),DOJ date)");
		st.execute();
		System.out.println("table created");*/
		PreparedStatement st=con.prepareStatement("insert into marlabemp values(?,?,?,?)");
		st.setInt(1, empno);
		st.setString(2,name);
		st.setString(3,address);
		st.setString(4,DOJ);
		st.execute();
		System.out.println("row inserted");
		
		}
}

---------------------------------------------------------------------------------------------------------------
wap to use case and switch and perform the task.
1.insert 2.update 3.delete 4 .display the records.
------------------------------------------------------------------------------------
MySql
-----------------
To see the databases present
1)show databases;
-------------------------------------------
To create database
2)create database marlabs
---------------------------------------------------
To go into the database
3)use marlabs;
----------------------------------------------------
To delete the database
4)drop database marlabs;
-----------------------------------------------------
To create a table in the database
5)create table student(studid int,name varchar(30),address varchar(30));
-------------------------------------------------------------------------
To insert the row into the table
6)insert into student values(102,'Trupti','Bangalore');
-----------------------------------------------------------------------------------
To update the data 
7)update student set address='Orissa' where studid=102;
--------------------------------------------------------------------------------------
To delete the data
8)delete from student where studid=101;
---------------------------------------------------------------------------------
To add a column
9)alter table student add phy int;
alter table student add chem int;
alter table student add bio int;
alter table student add total int;
alter table student add avg int;
----------------------------------------------------------------
10)update the newly inserted columns
 update student set phy=78,chem=56,bio=72 where studid=101;
----------------------------------------------------------------------------------------------------------
11)find the total
update student set total=phy+chem+bio where studid=103;
update student set total=phy+chem+bio where rollno in(101,102,103);
12)to find the average
update student set avg=total/3 where studid in(101,102,103);
-----------------------------------------------------------------------------------------------------------------
package org.saturday;
import java.sql.*; 
public class FirstJdbc 
{
public static void main(String[] args) throws Exception
{
	Class.forName("com.mysql.cj.jdbc.Driver");//driver is loaded
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/newdatabase","root","1234");
	Statement st=con.createStatement();
	//st.execute("create table employee (empid int,name varchar(30),address varchar(30))");
	//System.out.println("Table created");
	st.execute("insert into employee values(103,'peter','Bangalore')");
	System.out.println("row inserted");
	st.execute("insert into employee values(104,'mohan','Bangalore')");
	System.out.println("row inserted");
	
	st.execute("delete from employee where empid=101");
	System.out.println("row deleted");
	
}
}

----------------------------------------------------------------------------------------------------------
package org.saturday;
import java.sql.*; 
public class FirstJdbc 
{
public static void main(String[] args) throws Exception
{
	Class.forName("com.mysql.cj.jdbc.Driver");//to link between java and mysql we require a driver
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/anudip","root","1234");
	Statement st=con.createStatement();
	//st.execute("create table employee (empid int,name varchar(30),address varchar(30))");
	//System.out.println("Table created");
	st.execute("insert into employee values(102,'alam','bangalore')");
	System.out.println("row inserted");
	
}
}
-------------------------------------------------------------------------------------------------------------------------------
package org.saturday;
import java.sql.*; 
public class FirstJdbc 
{
public static void main(String[] args) throws Exception
{
	Class.forName("com.mysql.cj.jdbc.Driver");//to link between java and mysql we require a driver
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/anudip","root","1234");
	Statement st=con.createStatement();
	//st.execute("create table employee (empid int,name varchar(30),address varchar(30))");
	//System.out.println("Table created");
	//st.execute("insert into employee values(102,'alam','bangalore')");
	//System.out.println("row inserted");
	st.execute("update employee set address='chennei' where empid=101");
	System.out.println("row updated");
}
}

------------------------------------------------------------------------------------------------------------
package org.saturday;
import java.sql.*; 
public class FirstJdbc 
{
public static void main(String[] args) throws Exception
{
	Class.forName("com.mysql.cj.jdbc.Driver");//to link between java and mysql we require a driver
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/anudip","root","1234");
	Statement st=con.createStatement();
	//st.execute("create table employee (empid int,name varchar(30),address varchar(30))");
	//System.out.println("Table created");
	//st.execute("insert into employee values(102,'alam','bangalore')");
	//System.out.println("row inserted");
	st.execute("update employee set address='chennei' where empid=101");
	System.out.println("row updated");
}
}
----------------------------------------------------------
package org.saturday;
import java.sql.*; 
import java.util.*;
public class FirstJdbc 
{
public static void main(String[] args) throws Exception
{
	Class.forName("com.mysql.cj.jdbc.Driver");//driver is loaded
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/newdatabase","root","1234");
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter empid,name,address");
	int empid=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
PreparedStatement ps=con.prepareStatement("insert into employee values(?,?,?)");
ps.setInt(1, empid);
ps.setString(2, name);
ps.setString(3, address);
ps.execute();
System.out.println("row inserted");
	}
}
-------------------------------------------------------------------------------------------------------------
package org.saturday;
import java.sql.*; 
import java.util.*;
public class FirstJdbc 
{
public static void main(String[] args) throws Exception
{
	Class.forName("com.mysql.cj.jdbc.Driver");//driver is loaded
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/newdatabase","root","1234");
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter empid,name,address for modification");
	int empid=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
PreparedStatement ps=con.prepareStatement("update employee set name=?,address=? where empid=?");
ps.setString(1, name);
ps.setString(2, address);
ps.setInt(3, empid);
ps.execute();
System.out.println("row updated");
	}
}

-------------------------------------------------------------------------------------
package org.saturday;
import java.sql.*; 
import java.util.*;
public class FirstJdbc 
{
public static void main(String[] args) throws Exception
{
	Class.forName("com.mysql.cj.jdbc.Driver");//driver is loaded
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/newdatabase","root","1234");
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter empid for deleting");
	int empid=ob.nextInt();
	
PreparedStatement ps=con.prepareStatement("delete from  employee where empid=?");
ps.setInt(1, empid);
ps.execute();
System.out.println("row deleted");
	}
}

----------------------------------------------------

how to add jar file (driver)
----------------------------------------------
rightclick on project---->properties------>Java Build path--->libraries---->classpath---->add external jar---->search--->apply and close.
-------------------------------------------------------------------------------------
Program-1
-------------------
package JDBC;
import java.sql.*;
import java.util.*;
public class Student 
{
public static void main(String[] args)throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter studID,name,address");
	int studid=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
			Class.forName("com.mysql.jdbc.Driver");
		Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/marlabs","root","1234");
		PreparedStatement st=con.prepareStatement("insert into student values(?,?,?)");
		st.setInt(1, studid);
		st.setString(2,name);
		st.setString(3,address);
		st.execute();
		System.out.println("row inserted");
		
		}
}

------------------------------------------------------
*add MySql connector to the build path
----------------------------------------------------------
Connecting the database using GUI (servlet/JSP)
-------------------------------------------------------------------------
Servlet is a server side programming language.
There are 2 types of servlet
1)Generic Servlet(Protocal Independent)
2)HttpServlet(Protocal dependent)
-------------------------------------------------------------
In the servlet we don't have the main()

we have the lifecycle method for Generic Servlet.
init():- This execute for one time .It is used to create the memory block.
service() :- This execute for 'n' no of times .It accepts request and gives the response. 
destroy():-This execute for one time .It is used to delete the  memory block. 
------------------------------------------------------------------------------------
we have the lifecycle method for Http Servlet.
init():- This execute for one time .It is used to create the memory block.
service()/doGet()/doPost() :- This execute for 'n' no of times .It accepts request and gives the response. 
destroy():-This execute for one time .It is used to delete the  memory block. 
------------------------------------------------------------------------------------------------------------
Example-1
------------------
<html>
<body bgcolor=cyan>
<h1>Employee Registration Page</h1><hr>
<form action=StudentData>
<table>
<tr><td>Enter StudID<td><input type=text name=t1 placeholder="enter studentID" size=20 required></tr>
<tr><td>Enter Name<td><input type=text name=t2 placeholder="enter studentName" size=20 required></tr>
<tr><td>Enter Address<td><input type=text name=t3 placeholder="enter studentAddress" size=20 required></tr>
<tr><td><td><input type=submit value=Insert name=b1>
<input type=submit value=Update name=b1>
<input type=submit value=Delete name=b1>
<input type=submit value=Select name=b1>
</tr>
</table>
</form>
</body>
</html>
----------------------------------------------------------------------------------------
import java.io.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
@WebServlet("/StudentData")
public class StudentData extends GenericServlet 
{
public void init()
{System.out.println("init");}


@Override
public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException 
{
res.setContentType("text/html");
PrintWriter pw=res.getWriter();
String a=req.getParameter("t1");
String b=req.getParameter("t2");
String c=req.getParameter("t3");
pw.println("The StudentID is :"+a);
pw.println("<br>");
pw.println("The Student Name is :"+b);
pw.println("<br>");
pw.println("The Student Address is :"+c);
}
public void destroy()
{System.out.println("Destroy");}
}
---------------------------------------------------------------------------
*Add tomcat server
*Add 2 jar files:- MySql Connector.jar ,Servlet-api.jar
------------------------------------------------------------------------------------
package sandip;
import java.io.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
@WebServlet("/StudentData")
public class StudentData extends GenericServlet 
{
@Override
public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException 
{
	Connection con=null;
res.setContentType("text/html");
PrintWriter pw=res.getWriter();
String a=req.getParameter("t1");
String b=req.getParameter("t2");
String c=req.getParameter("t3");
pw.println("The StudentID is :"+a);
pw.println("<br>");
pw.println("The Student Name is :"+b);
pw.println("<br>");
pw.println("The Student Address is :"+c);
try
{
	Class.forName("com.mysql.jdbc.Driver");
	con=DriverManager.getConnection("jdbc:mysql://localhost:3306/marlabs","root","1234");
	}
catch(Exception ae)
{
	ae.printStackTrace();
}
String x=req.getParameter("b1");
if(x.equals("Insert"))
{
	PreparedStatement st;
	try {
		st = con.prepareStatement("insert into student values(?,?,?)");
		st.setInt(1,Integer.parseInt(a));
	st.setString(2,b);
	st.setString(3,c);
	st.execute();
	System.out.println("row inserted");
} catch (SQLException e) {
		
		e.printStackTrace();
	}
}
}}
--------------------------------------------------------------------------------------------------------------------
Jdbc :-
---------------
package NewYear2022;
import java.sql.*;
public class JDBC1 
{
public static void main(String[] args)throws Exception
{
	String driverclass="com.mysql.jdbc.Driver";
	String url="jdbc:mysql://localhost:3306/sandip";
	String username="root";
	String password="1234";
	String sql="insert into student values(109,'shubham','Bangalore')";
	Class.forName(driverclass);
	Connection con=DriverManager.getConnection(url,username,password);
	Statement st=con.createStatement();
	int count=st.executeUpdate(sql);
	System.out.println("inserted row = "+count);
}
}
-------------------------------------------------------------------------------------
Create a Table :-
-----------------------
In oracle we have 5 contrains.
1)primary key:- if we declare a column as primary key we cannot enter a duplicate value and also we cannot keep it null.

2)unique key :- if we declare a column as unique key we cannot enter duplicate value.

3)not null:- if we declare a column as not null we cannot keep the column empty.

4)check :- if we declare a column as check we can restrict the data .
example:- salary should be greater than 15000.Marks should be greater than 0.

5)Foreign key:- it is to refer another table.
----------------------------------------------------------------------------------------

number(9,2) :- 9999999.99
----------------------------------------------------------------
Example-
package NewYear2022;
import java.sql.*;
public class JDBC1 
{
public static void main(String[] args)throws Exception
{
	String driverclass="com.mysql.jdbc.Driver";
	String url="jdbc:mysql://localhost:3306/sandip";
	String username="system";
	String password="1234";
	String sql="insert into empmarlabs values(101,'shubham','7766554433',19000)";
	Class.forName(driverclass);
	Connection con=DriverManager.getConnection(url,username,password);
	Statement st=con.createStatement();
	int count=st.executeUpdate(sql);
	System.out.println("inserted row = "+count);
}
}
--------------------------------------------------------------------------------------------------------
C:\oraclexe\app\oracle\product\10.2.0\server\jdbc\lib---ojdbc14.jar
--------------------------------------------------------------------------------------------------------------------------------
create table studentM(studid int not null auto_increment,name varchar(30) not null,address varchar(30) not null,
			primary key(studid));
-----------------------------------------------------------------------------------------------------------------------------------------
package NewYear2022;
import java.sql.*;
import java.util.*;
public class JDBC1 
{
public static void main(String[] args)throws Exception
{
	String driverclass="com.mysql.jdbc.Driver";
	String url="jdbc:mysql://localhost:3306/sandip";
	String username="root";
	String password="1234";
	String sql="insert into studentM values(?,?,?)";
	Class.forName(driverclass);
	Connection con=DriverManager.getConnection(url,username,password);
	PreparedStatement st=con.prepareStatement(sql);
	Scanner ob=new Scanner(System.in);
	System.out.println("enter studid,name,address");
	int studid=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
	st.setInt(1, studid);
	st.setString(2, name);
	st.setString(3, address);
	int count=st.executeUpdate();
	System.out.println("inserted row = "+count);
}
}
----------------------------------------------------------------------------------------------------------------------------------------------
create table studentM(studid number not null,name varchar(30) not null,address varchar(30) not null,			primary key(studid));
-----------------------------------------------------------------------------------------------------------------------------------------
package NewYear2022;
import java.sql.*;
import java.util.*;
public class JDBC1 
{
public static void main(String[] args)throws Exception
{
	String driverclass="com.mysql.jdbc.Driver";
	String url="jdbc:mysql://localhost:3306/sandip";
	String username="root";
	String password="1234";
	String sql="delete from studentM";
	String sql1="truncate table studentM";
	Class.forName(driverclass);
	Connection con=DriverManager.getConnection(url,username,password);
	PreparedStatement st=null;
	System.out.println("************************************");
	System.out.println("MENU");
	System.out.println("1.DELETE ALL STUDENTS");
	System.out.println("2.DELETE BY ID");
	System.out.println("3.DELETE BY NAME");
	System.out.println("4.DELETE BY ADDRESS");
	System.out.println("*************************************");
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter your Choice");
	int option=ob.nextInt();
	switch(option)
	{
	case 1:
		st=con.prepareStatement(sql1);
		System.out.println("deleted all rows" );
	break;
	case 2:
		sql+=" where studid=?";
		System.out.println(sql);
		System.out.println("enter studid");
		int studid=ob.nextInt();
		st=con.prepareStatement(sql);
		st.setInt(1,studid);
		break;
	case 3:
		sql+=" where name=?";
		System.out.println(sql);
		System.out.println("enter name");
		String name=ob.next();
		st=con.prepareStatement(sql);
		st.setString(1, name);
		break;
	case 4:
		sql+=" where address=?";
		System.out.println(sql);
		System.out.println("enter address");
		String address=ob.next();
		st=con.prepareStatement(sql);
		st.setString(1, address);
		break;
	default:
		System.out.println("sorry wrong option");
		break;
	}
		int count=st.executeUpdate();
		if(count==0)
			System.out.println("sorry no rows updated");
		else
			System.out.println("Rows updated is :"+count);
			con.close();

}}
------------------------------------------------------------------
display the employees 
1)select All employees
2)select employee by ID
3)select employee by name
4)update employee by ID
---------------------------------------------------------------------------
example:-
package Connection;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;

public class EmpData {
public static void main(String[] args)throws Exception
{
String driverclass="com.mysql.cj.jdbc.Driver";
String url="jdbc:mysql://localhost:3306/Student";
String username="root";
String password="Root@1234";
String sql="Select from Employee";
String sql1="Select table Employee";
Class.forName(driverclass);
Connection con=DriverManager.getConnection(url,username,password);
PreparedStatement st=null;
System.out.println("************************************");
System.out.println("MENU");
System.out.println("1.Select ALL Employee");
System.out.println("2.Select BY ID");
System.out.println("3.Select BY Name");
System.out.println("4.Select BY salary");
System.out.println("*************************************");
Scanner ob=new Scanner(System.in);
System.out.println("Enter your Choice");
int option=ob.nextInt();
switch(option)
{
case 1:
st=con.prepareStatement(sql1);
System.out.println("Selected all rows" );
ResultSet rs=st.executeQuery("select* from Employee");
while(rs.next())
{
System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
}
break;
case 2:
sql+=" where Empid=?";
System.out.println(sql);
System.out.println("enter Empid");
int Empid=ob.nextInt();
st=con.prepareStatement("select * from Employee where Empid=?");
st.setInt(1,Empid);
ResultSet rs1=st.executeQuery();
while(rs1.next())
{
System.out.println(rs1.getInt(1)+" "+rs1.getString(2)+" "+rs1.getString(3));
}
break;
case 3:
sql+=" where name=?";
System.out.println(sql);
System.out.println("enter name");
String name=ob.next();
st=con.prepareStatement("select * from Employee where name=?");
st.setString(1, name);
ResultSet rs2=st.executeQuery();
while(rs2.next())
{
System.out.println(rs2.getInt(1)+" "+rs2.getString(2)+" "+rs2.getString(3));
}
break;
case 4:
sql+=" where empsalary=?";
System.out.println(sql);
System.out.println("enter salary");
int empsalary=ob.nextInt();
ob.close();
st=con.prepareStatement("select * from Employee where empSalary=?");
st.setInt(1,empsalary);
ResultSet rs3=st.executeQuery();
while(rs3.next())
{
System.out.println(rs3.getInt(1)+" "+rs3.getString(2)+" "+rs3.getString(3));
}
break;
default:
System.out.println("sorry wrong option");
break;

}
}
}
----------------------------------------------------------------------------------------------------------
oracle
https://drive.google.com/file/d/0B_8PmSMM3tRdMl9PS1hUMFFEbkk/view?usp=sharing&resourcekey=0-qjqe8sjixyAi8meOXxO_jQ
---------------------------------------------------------------------------------------------------------------
MySql + YOG
-----------------------
https://drive.google.com/drive/folders/14Ht1eOCBnImEDYLwlw8hS4VY63GsSolM?usp=sharing
-----------------------------------------------------------------------------------------------------------------------------------------
Create a database
create a table called student
insert 5 records into the table.
and display it.
------------------------------------------------------



















