Hibernate
-------------------------

1) Hibernate is a object Relational Mapping tool.
2) Hibernate is used to store the objects into a database where as JDBC store primitive types in a database.
3) It provides connection pooling.
4) It provides two types of caching.
5) We do not need to write most of the sql scripts for insert, delete object and selecting the result set.
6) Hibernate is database independent code will work for oracle, MySql, SqlServer etc.
 7) As hibernate is set of objects we need not to learn sql languages .we treat table as object.
8) Basic sql queries are generated by hibernate.
9) We need not do query tuning in case of hibernate.
10) Development and maintenance is very easy because we need not to write queries.

----------------------------------------------------------------------------------------------------------------

Generator classes
----------------------------
It is used to generate identifier column values. The first is generally called identifier column.
The different generator classes are:-
1)sequence:- The database sequence is automatically generated.
2)Assigned :-get value from application
3)User defined generator class:-
4)UUID :-It uses 128bit UUID algorithm to generate identifiers of type string, unique within a network .
5)GUID:-It is a database generated string on oracle, MySql, Sql server.
6)Identity:-Mysql takes identity, oracle takes sequence.
7)foreign:- used in relationship primary key.
8)hilo:-hilo use hilo algorithm to efficiently generate identifiers of type long, sort, int given in a table and column only for a particular database. 
9)sequence-hilo:-same as hilo algorithm but it is for a given named Database sequence.
10)Native:-It picks identity, sequence or hilo depending upon the capabilities of the underlying database.
*oracle do not support identity, Mysql support .Oracle support sequence
11)Select:- Retrieves primary key assigned by database trigger by selecting the row by some unique key and retrieving the primary key value.
12)Increment:- it increments as sequence.

------------------------------------------------------------------------------------------------
     Session
1)session.save():- It is used to save an object in the database.
2)session.update():-It is used to update an existing record.
3)session.delete():- It is used to delete an existing record.
4)session.load():-It is used to retrieve a database record in the object representation.
5)session.saveOnUpload :-If there is no record in the database then it will insert the record ,if there is record in the database it will update.
6)session.lock():-we can lock the database record using lock() method.
7)session.evict():-it will change the object from persistent state to detached state. It remove the one object from session.
8)session.flush:- it only update.
9)session.refresh():-it will synchronize database with session.
10)session.clear():-it removes all the objects from the session.
11)session.contains():-if the object is available in the session then it returns true.
12)session.disconnect():-disconnect the session from the current JDBC connection.
13)session.reconnect():- obtains a new JDBC connection.
14)session.isOpen():-checks if the session is still open.
15)transaction.commit():- it both update and commit.
16)session.get():-it is similar to session.load() to retrieve data from database.
If there is no record in the database get() return null where as load() throws Exception.

-----------------------------------------------------------------------------------------------------
HQL (Hibernate Query Language)
1)HQL is similar to sql but the difference is we have to give pojo name and property name, instead of table name and column name.
2)HQL queries are database independent.
3)We can execute select, update and delete but not general insert.
Example:- insert into student1 select * from student;
4)If it is HQL directly we can get list of records and the query is database independent.
Example:-
1)update student set student name:=sname, studentAge:=sage where student no:=sno;
2)from:- from student;
3)select s.studentno, s.studentname from student s;
4)where:- from student where studentno >:studentNo;
5)Order by:-from student s where s.studentname:=sname order by s.studentno asc;
6)and – or :- from student s where s.studentid>:sid and/or s.studentage:=sage;
We can use named parameter (:sno) instead of positional parameter(?);
---------------------------------------------------------------------------------------

Criteria :-
1)in criteria we never write the query we build the query using some method.
2)all select queries we execute it using criteria and all the non-select queries(update/delete) we execute it using HQL.
3)to build the conditions we use Restrictions or Expression. Expression extends Restriction .
4)all the methods in restrictions class are static methods .All the expression class methods are returning different expression object and all those expression class are implementing criterion interface.
Expression class Methods:-
1)eq-equal
2)ne-not equal
3)like
4)ge-greater than equal
5)gt-greater
6)lt-less than
7)le-less than equal
8)between
9)in
10)isNull
11)isNotNull
12)and
13)or
14)idEq:-it take id column property automatically
15)ilike:-case-insensitive
Example:-
1)Criterian crit= Expression.ne(“studentNo”,new long(1));
2)Criterian crit= Expression.gt(“studentNo”,new long(1));
3)Criterian crit= Expression.like(“studentName”,”sandip”);
4)Criterian crit= Expression.between(“studentNo”,new long(5),new long(10));
5)sql query:-select sno,sname from student where sno=? Or sname=?;
Criteria crit=session.createCriteria(student.class);
Criterion crit1=Expression.eq(“studentNo”,new long(1));
Criterion crit2=Expression.eq(“studentName”,”sandip”);
Criterion crit3=Expression.or(crit1,crit2);
Criteria.add(crit3);
List studList=criteria.list();
•	Criteria is interface used to build the query.
•	Criterian is interface used for condition.
----------------------------------------------------------------------------------------------------------------
In Hibernate, mapping refers to the process of establishing a relationship between Java objects and database tables. Hibernate is an Object-Relational Mapping (ORM) framework that simplifies database interactions by allowing developers to work with Java objects instead of SQL queries directly.

Mapping in Hibernate involves defining how the fields and properties of a Java class correspond to the columns in a database table. This mapping is typically done through XML files or annotations in the source code. There are two main types of mappings in Hibernate:

XML Mapping:
Hibernate allows you to define the mapping between Java objects and database tables using XML configuration files. In the XML mapping file, you specify the class attributes, relationships, and how they map to the corresponding database table columns. Here's a simplified example:

hibernate.hbm.xml
------------------------------------------------------------
<!-- Hibernate XML mapping file -->
<hibernate-mapping>
    <class name="com.example.Employee" table="employee">
        <id name="id" type="long">
            <generator class="native"/>
        </id>
        <property name="name" column="employee_name" type="string"/>
        <property name="salary" column="employee_salary" type="double"/>
        <!-- Other mappings and relationships -->
    </class>
</hibernate-mapping>
-----------------------------------------------------------------------------------------------------------------------------
Annotation Mapping:
With the release of Java 5 and later versions, Hibernate introduced annotations as an alternative to XML mapping. Annotations are metadata that you can embed directly in your Java classes to define the mapping. Here's an example:

employee.java
----------------------------------------
@Entity
@Table(name = "employee")
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "employee_name")
    private String name;

    @Column(name = "employee_salary")
    private double salary;

    // Other fields, relationships, and methods
}
Mapping in Hibernate allows developers to seamlessly interact with the database using Java objects, reducing the need for manual SQL queries and providing a more object-oriented approach to data persistence. It also enables Hibernate to handle the translation between the object-oriented model and the relational database model.

------------------------------------------------------------Hibernate Example-1-----------------------------------------------------------------------------------
mypojo.java
-------------------------
public class mypojo
{
	String rollno,name,address;

	public String getRollno() {
		return rollno;
	}

	public void setRollno(String rollno) {
		this.rollno = rollno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}
	
}
--------------------------------------------------------------------------------------------------------
part.java
-------------------
import java.util.*;

import org.hibernate.*;
import org.hibernate.cfg.*;

public class part
{
	public static void main(String args[])throws Exception
	{
		Configuration cfg=new Configuration();
		SessionFactory sf=cfg.configure().buildSessionFactory();
		Session ss=sf.openSession();
		mypojo pojo=new mypojo();
		Transaction tx=ss.beginTransaction();
		Query q=ss.createQuery("from mypojo");
		List stud=q.list();
		Iterator it=stud.iterator();
		while(it.hasNext())
		{
			pojo=(mypojo)it.next();
			System.out.println(pojo.getRollno());
			System.out.println(pojo.getName());
			System.out.println(pojo.getAddress());
		}
		
	}
}



/*
 * create table details1(phoneno varchar(30),email varchar(30),password  varchar(30));
 * 
 * insert into details1 values('99887766','sandip@gmail.com','1234')
 * 
 *
 */
----------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
"-//hibernate/hibernateconfigurationdtd3.0//en"
"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
<session-factory>
<property name="dialect">org.hibernate.dialect.MySQLDialect</property>
  <property name="connection.url">jdbc:mysql://localhost:3306/sandip</property>
  <property name="connection.username">root</property>
  <property name="connection.password">1234</property>
  <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
<property name="hibernate.hbm2ddl.auto">update</property>
<property name="show-sql">true</property>
<mapping resource="student1.hbm.xml"></mapping>
</session-factory>
</hibernate-configuration>
------------------------------------------------------------------------------------------
student1.hbm.xml
---------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//hibernate/hibernatemappingdtd3.0//en"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
<class name="mypojo" table="details">
<id name="rollno" type="string" column="rollno">
<generator class="assigned"></generator>
</id>
<property name="name" type="string" column="name"></property>
<property name="address" column="address" type="string"></property>
</class>
</hibernate-mapping>
--------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------Hibernate Example-2 -----------------------------------------------------------------------------------
First class a POJO class
---------------------------------
mypojo.java
-------------------------------
public class mypojo
{
	String rollno,name,address;

	public String getRollno() {
		return rollno;
	}

	public void setRollno(String rollno) {
		this.rollno = rollno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}
	
}
------------------------------------------------------------------------------------
mypojo1.java
-------------------------
public class mypojo1
{
	String phoneno,email,password;

	public String getPhoneno() {
		return phoneno;
	}

	public void setPhoneno(String phoneno) {
		this.phoneno = phoneno;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

		
}
---------------------------------------------------------------------------------------------------- 
part.java
----------------------
import java.util.*;

import org.hibernate.*;
import org.hibernate.cfg.*;

public class part
{
	public static void main(String args[])throws Exception
	{
		Configuration cfg=new Configuration();
		SessionFactory sf=cfg.configure().buildSessionFactory();
		Session ss=sf.openSession();
		mypojo pojo=new mypojo();
		mypojo1 pojo1=new mypojo1();
		Transaction tx=ss.beginTransaction();
		Query q=ss.createQuery("from mypojo");
		List stud=q.list();
		Iterator it=stud.iterator();
		while(it.hasNext())
		{
			pojo=(mypojo)it.next();
			System.out.println(pojo.getRollno());
			System.out.println(pojo.getName());
			System.out.println(pojo.getAddress());
		}
		Query q1=ss.createQuery("from mypojo1");
		List stud1=q1.list();
		Iterator it1=stud1.iterator();
		while(it1.hasNext())
		{
			pojo1=(mypojo1)it1.next();
			System.out.println(pojo1.getPhoneno());
			System.out.println(pojo1.getEmail());
			System.out.println(pojo1.getPassword());
		}
	}
}



/*
 * create table details1(phoneno varchar(30),email varchar(30),password  varchar(30));
 * 
 * insert into details1 values('99887766','sandip@gmail.com','1234')
 * 
 * create table details(rollno varchar(30),name varchar(30),address  varchar(30));
 * 
 * insert into details values('101','sandip','bangalore')
 */
---------------------------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
"-//hibernate/hibernateconfigurationdtd3.0//en"
"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
<session-factory>
<property name="dialect">org.hibernate.dialect.MySQLDialect</property>
  <property name="connection.url">jdbc:mysql://localhost:3306/sandip</property>
  <property name="connection.username">root</property>
  <property name="connection.password">1234</property>
  <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
<property name="hibernate.hbm2ddl.auto">update</property>
<property name="hibernate.hbm2ddl.auto">update</property>
<property name="show-sql">true</property>
<mapping resource="student1.hbm.xml"></mapping>
<mapping resource="student2.hbm.xml"></mapping>
</session-factory>
</hibernate-configuration>
----------------------------------------------------------------------------------------------------------------------------------
student1.hbm.xml
-----------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//hibernate/hibernatemappingdtd3.0//en"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
<class name="mypojo" table="details">
<id name="rollno" type="string" column="rollno">
<generator class="assigned"></generator>
</id>
<property name="name" type="string" column="name"></property>
<property name="address" column="address" type="string"></property>
</class>
</hibernate-mapping>
-------------------------------------------------------------------------------------------------------------------
student1.hbm.xml
--------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//hibernate/hibernatemappingdtd3.0//en"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
<class name="mypojo1" table="details1">
<id name="phoneno" type="string" column="phoneno">
<generator class="assigned"></generator>
</id>
<property name="email" type="string" column="email"></property>
<property name="password" column="password" type="string"></property>
</class>
</hibernate-mapping>
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
In hibernate we have 4 types of Relations
---------------------------------------------------------------------------
1)one-to-one relation ship (one employee has one address)
one student has one email address
i)two pojo classes---employee,address
ii)two hbm.xml ---employee.hbm.xml,address.hbm.xml
iii)one main file
iv)one configuration file.
total of 6 files.
-------------------------------------------------------------------------------
2)one-to-many relationship (one question asnwered by multiple students)
one teacher has multiple students
i)two pojo classes---teacher,student
ii)two hbm.xml ---teacher.hbm.xml,student.hbm.xml
iii)one main file
iv)one configuration file.
total of 6 files.
----------------------------------------------------------------------------------------
3)many-to-one relationship (many employee having one address)
i)two pojo classes---employee,address
ii)two hbm.xml ---employee.hbm.xml,address.hbm.xml
iii)one main file
iv)one configuration file.
total of 6 files.
-------------------------------------------------------------------------------------------------
4)many-to-many relationship (Question.java and Answer.java. Question class contains Answer class reference and vice versa.)
i)two pojo classes---question,answer
ii)two hbm.xml ---question.hbm.xml,answer.hbm.xml
iii)one main file
iv)one configuration file.
total of 6 files.
--------------------------------------------------------------------------------------------------------------
*in case of anotation the .hbm.xml files will be removed
------------------------------------------------------------------------------------
student.java
-------------------------------
public class mypojo
{
	String rollno,name,address;

	public String getRollno() {
		return rollno;
	}

	public void setRollno(String rollno) {
		this.rollno = rollno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}
	
}

-------------------------------------------------------------------------------------------------
anotation based there will no .hbm file
-----------------------------------------------------------------
import javax.persistence.*;  
import java.util.List;    
  
@Entity  
@Table(name="student")  
public class Student
 {    
@Id   <-----primary key
@GeneratedValue(strategy=GenerationType.TABLE)  
@Column (name="id")
private int id;    
@Column (name="sname")
private String studname;   
@Column (name="address")
private String address;  
public int getId() {  
    return id;  
}  
public void setId(int id) {  
    this.id = id;  
}  
public String getStudname() {  
    return studname;  
}  
public void setStudname(String studname) {  
    this.studname = studname;  
}  
public String getAddress() {  
    return Address;  
}  
public void setAddress(String address) {  
    this.address = address;  
}  
}  
------------------------------------------------------------------------------------------------------------------------------
Hibernate Interview
-----------------------------------
https://www.javatpoint.com/hibernate-interview-questions





